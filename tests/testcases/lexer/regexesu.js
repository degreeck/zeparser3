let {
  PARSE_MODE_REGEX,
} = require('../../utils');

let {
  $ERROR,
  $IDENT,
  $REGEXU,
} = require('../../../src/zetokenizer'); // nodejs doesnt support import and wont for a while, it seems (https://medium.com/the-node-js-collection/an-update-on-es6-modules-in-node-js-42c958b890c)

let regexesu = [ // pretty much the same as regexes except all regexes should have the u flag (causes regex to parse code points instead of code units and requires slightly different syntax)
  [`/abc/u`, $REGEXU, PARSE_MODE_REGEX],

  // or
  [`/a|b/u`, $REGEXU, PARSE_MODE_REGEX],
  [[`/|a/u`, `/a|/u`, `/|/u`, '/a||/u'], $REGEXU, PARSE_MODE_REGEX, 'fine OR because atoms can be empty'],

  // simple atoms and quantifiers
  [[`/^abc/u`, `/abc$/u`, `/a.c/u`], $REGEXU, PARSE_MODE_REGEX, 'simple atoms'],
  [[`/^/u`, `/ab^cd/u`, `/abc^/u`, `/abc^abc/u`, `/$/u`, `/$abc/u`, `/abc$abc/u`], $REGEXU, PARSE_MODE_REGEX, 'simple atoms where you dont usually see them'],
  [[`/a*/u`, `/a?/u`, `/a+/u`], $REGEXU, PARSE_MODE_REGEX, 'simple quantifiers'],
  [[`/a*b/u`, `/a?b/u`, `/a+b/u`], $REGEXU, PARSE_MODE_REGEX, 'simple quantifiers with suffix'],
  [[`/?/u`, `/+/u`, `/?a/u`, `/+a/u`, `/??/u`, `/+?/u`, `/|*/u`, `/|?/u`, `/|+/u`], $ERROR, PARSE_MODE_REGEX, 'simple quantifiers in an invalid place'],
  [[`/a**/u`, `/a?+/u`, `/a++/u`], $ERROR, PARSE_MODE_REGEX, 'quantifing a quantifier'],
  [`/a??/u`, $REGEXU, PARSE_MODE_REGEX, 'quantifing a quantifier', 'suffixsp'],

  // most permutations with {d,d}
  [[`/a{0}/u`, `/a{1}/u`, `/a{2}/u`, `/a{3}/u`, `/a{4}/u`, `/a{5}/u`, `/a{6}/u`, `/a{7}/u`, `/a{8}/u`, `/a{9}/u`], $REGEXU, PARSE_MODE_REGEX],
  [[`/a{11}/u`, `/a{12}/u`, `/a{23}/u`, `/a{34}/u`, `/a{45}/u`, `/a{56}/u`, `/a{67}/u`, `/a{78}/u`, `/a{89}/u`, `/a{90}/u`], $REGEXU, PARSE_MODE_REGEX],
  [[`/a{0,}/u`, `/a{1,}/u`, `/a{2,}/u`, `/a{3,}/u`, `/a{4,}/u`, `/a{5,}/u`, `/a{6,}/u`, `/a{7,}/u`, `/a{8,}/u`, `/a{9,}/u`], $REGEXU, PARSE_MODE_REGEX],
  [[`/a{11,}/u`, `/a{12,}/u`, `/a{23,}/u`, `/a{34,}/u`, `/a{45,}/u`, `/a{56,}/u`, `/a{67,}/u`, `/a{78,}/u`, `/a{89,}/u`, `/a{90,}/u`], $REGEXU, PARSE_MODE_REGEX],
  [[`/a{0,0}/u`, `/a{1,1}/u`, `/a{2,2}/u`, `/a{3,3}/u`, `/a{4,4}/u`, `/a{5,5}/u`, `/a{6,6}/u`, `/a{7,7}/u`, `/a{8,8}/u`, `/a{9,9}/u`], $REGEXU, PARSE_MODE_REGEX],
  [[`/a{11,0}/u`, `/a{12,1}/u`, `/a{23,2}/u`, `/a{34,3}/u`, `/a{45,4}/u`, `/a{56,5}/u`, `/a{67,6}/u`, `/a{78,7}/u`, `/a{89,8}/u`, `/a{90,9}/u`], $ERROR, PARSE_MODE_REGEX],
  [[`/a{0,15}/u`, `/a{1,16}/u`, `/a{2,27}/u`, `/a{3,38}/u`, `/a{4,49}/u`, `/a{5,50}/u`, `/a{6,61}/u`, `/a{7,72}/u`, `/a{8,83}/u`, `/a{9,94}/u`], $REGEXU, PARSE_MODE_REGEX],
  [[`/a{11,15}/u`, `/a{12,26}/u`, `/a{23,37}/u`, `/a{34,48}/u`, `/a{45,59}/u`, `/a{56,60}/u`, `/a{67,71}/u`, `/a{78,82}/u`, `/a{89,93}/u`, `/a{90,94}/u`], $REGEXU, PARSE_MODE_REGEX],
  [[`/a{,0}/u`, `/a{,1}/u`, `/a{,2}/u`, `/a{,3}/u`, `/a{,4}/u`, `/a{,5}/u`, `/a{,6}/u`, `/a{,7}/u`, `/a{,8}/u`, `/a{,9}/u`], $REGEXU, PARSE_MODE_REGEX],
  [[`/a{,15}/u`, `/a{,16}/u`, `/a{,27}/u`, `/a{,38}/u`, `/a{,49}/u`, `/a{,50}/u`, `/a{,61}/u`, `/a{,72}/u`, `/a{,83}/u`, `/a{,94}/u`], $REGEXU, PARSE_MODE_REGEX],
  [['/a{ 1}/u', '/a{1 }/u', '/a{1, 1}/u', '/a{ 1, 1}/u', '/a{1 ,1}/u', '/a{ 1 , 1}/u', '/a{1,1 }/u', '/a{1, 1 }/u', '/a{ 1, 1 }/u', '/a{ 1 , 1 }/u'], $ERROR, PARSE_MODE_REGEX, 'no spaces allowed in quantifier'],
  // edge case odd ball curly quantifier errors
  [[`/a{1,0}/u`, `/a{2,1}/u`, `/a{100,45}/u`], $ERROR, PARSE_MODE_REGEX, 'must be {lo,hi}'],
  [[`/a{01,1}/u`, `/a{1,02}/u`, `/a{03,04}/u`, `/a{00,00}/u`], $ERROR, PARSE_MODE_REGEX, 'i think this is an error when getting the MV even when the cfg just says "digits"'],
  [[`/a{0x01,1}/u`, `/a{0x15,02}/u`, `/a{0b01,04}/u`, `/a{00,0o01}/u`], $ERROR, PARSE_MODE_REGEX, 'alternative number literals not allowed'],

  [['/foo/u'], $REGEXU, PARSE_MODE_REGEX],
  [['/foo/uu'], $ERROR, PARSE_MODE_REGEX],
  [['/foo/um', '/foo/ui', '/foo/ug', '/foo/uy'], $REGEXU, PARSE_MODE_REGEX],
  [['/foo/mu', '/foo/iu', '/foo/gu', '/foo/yu'], $REGEXU, PARSE_MODE_REGEX],
  [['/foo/uig', '/foo/gui', '/foo/ium', '/foo/myu', '/foo/ugy'], $REGEXU, PARSE_MODE_REGEX],
  [['/foo/uiug', '/foo/gmumi', '/foo/ggumi', '/foo/myuy', '/foo/iugyi'], $ERROR, PARSE_MODE_REGEX],

  // escapes (only \f \n \r \t \v should work)
  [['/\\d/u', '/\\D/u', '/\\f/u', '/\\n/u', '/\\r/u', '/\\s/u', '/\\S/u', '/\\t/u', '/\\v/u', '/\\w/u', '/\\W/u'], $REGEXU, PARSE_MODE_REGEX, 'only escaping a single letter'],
  [['/abc\\d/u', '/abc\\D/u', '/abc\\f/u', '/abc\\n/u', '/abc\\r/u', '/abc\\s/u', '/abc\\S/u', '/abc\\t/u', '/abc\\v/u', '/abc\\w/u', '/abc\\W/u'], $REGEXU, PARSE_MODE_REGEX, 'escaping a prefixed single letter'],
  [['/\\fabcd/u', '/\\dabcd/u', '/\\Dabcd/u', '/\\nabcd/u', '/\\rabcd/u', '/\\sabcd/u', '/\\Sabcd/u', '/\\tabcd/u', '/\\vabcd/u', '/\\wabcd/u', '/\\Wabcd/u'], $REGEXU, PARSE_MODE_REGEX, 'escaping a suffixed single letter'],
  [['/abc\\fdeff/u', '/abc\\ddeff/u', '/abc\\Ddeff/u', '/abc\\ndeff/u', '/abc\\rdeff/u', '/abc\\sdeff/u', '/abc\\Sdeff/u', '/abc\\tdeff/u', '/abc\\vdeff/u', '/abc\\wdeff/u', '/abc\\Wdeff/u'], $REGEXU, PARSE_MODE_REGEX, 'escaping a single letter in the middle'],
  // the other char escapes are errors...
  [['/\\a/u', '/\\e/u', '/\\g/u', '/\\h/u', '/\\i/u', '/\\j/u', '/\\k/u', '/\\l/u', '/\\m/u', '/\\o/u', '/\\p/u', '/\\q/u', '/\\u/u', '/\\x/u', '/\\y/u', '/\\z/u'], $ERROR, PARSE_MODE_REGEX, 'only escaping a single lc letter'],
  [['/\\A/u', '/\\E/u', '/\\F/u', '/\\G/u', '/\\H/u', '/\\I/u', '/\\J/u', '/\\K/u', '/\\L/u', '/\\M/u', '/\\N/u', '/\\O/u', '/\\P/u', '/\\Q/u', '/\\R/u', '/\\T/u', '/\\U/u', '/\\V/u', '/\\X/u', '/\\Y/u', '/\\Z/u'], $ERROR, PARSE_MODE_REGEX, 'only escaping a single uc letter'],
  [['/abc\\a/u', '/abc\\e/u', '/abc\\g/u', '/abc\\h/u', '/abc\\i/u', '/abc\\j/u', '/abc\\k/u', '/abc\\l/u', '/abc\\m/u', '/abc\\o/u', '/abc\\p/u', '/abc\\q/u', '/abc\\u/u', '/abc\\x/u', '/abc\\y/u', '/abc\\z/u'], $ERROR, PARSE_MODE_REGEX, 'escaping a prefixed single lc letter'],
  [['/abc\\A/u', '/abc\\E/u', '/abc\\F/u', '/abc\\G/u', '/abc\\H/u', '/abc\\I/u', '/abc\\J/u', '/abc\\K/u', '/abc\\L/u', '/abc\\M/u', '/abc\\N/u', '/abc\\O/u', '/abc\\P/u', '/abc\\Q/u', '/abc\\R/u', '/abc\\T/u', '/abc\\U/u', '/abc\\V/u', '/abc\\X/u', '/abc\\Y/u', '/abc\\Z/u'], $ERROR, PARSE_MODE_REGEX, 'escaping a prefixed single uc letter'],
  [['/\\aabcd/u', '/\\eabcd/u', '/\\gabcd/u', '/\\habcd/u', '/\\iabcd/u', '/\\jabcd/u', '/\\kabcd/u', '/\\labcd/u', '/\\mabcd/u', '/\\oabcd/u', '/\\pabcd/u', '/\\qabcd/u', '/\\yabcd/u', '/\\zabcd/u'], $ERROR, PARSE_MODE_REGEX, 'escaping a suffixed single lc letter'],
  [['/\\Aabcd/u', '/\\Cabcd/u', '/\\Eabcd/u', '/\\Fabcd/u', '/\\Gabcd/u', '/\\Habcd/u', '/\\Iabcd/u', '/\\Jabcd/u', '/\\Kabcd/u', '/\\Labcd/u', '/\\Mabcd/u', '/\\Nabcd/u', '/\\Oabcd/u', '/\\Pabcd/u', '/\\Qabcd/u', '/\\Rabcd/u', '/\\Tabcd/u', '/\\Uabcd/u', '/\\Vabcd/u', '/\\Yabcd/u', '/\\Zabcd/u'], $ERROR, PARSE_MODE_REGEX, 'escaping a suffixed single uc letter'],
  [['/abc\\adeff/u', '/abc\\gdeff/u', '/abc\\hdeff/u', '/abc\\ideff/u', '/abc\\jdeff/u', '/abc\\kdeff/u', '/abc\\ldeff/u', '/abc\\mdeff/u', '/abc\\odeff/u', '/abc\\pdeff/u', '/abc\\qdeff/u', '/abc\\ydeff/u', '/abc\\zdeff/u'], $ERROR, PARSE_MODE_REGEX, 'escaping a single lc letter in the middle'],
  [['/abc\\Adeff/u', '/abc\\Cdeff/u', '/abc\\Edeff/u', '/abc\\Fdeff/u', '/abc\\Gdeff/u', '/abc\\Hdeff/u', '/abc\\Ideff/u', '/abc\\Jdeff/u', '/abc\\Kdeff/u', '/abc\\Ldeff/u', '/abc\\Mdeff/u', '/abc\\Ndeff/u', '/abc\\Odeff/u', '/abc\\Pdeff/u', '/abc\\Qdeff/u', '/abc\\Rdeff/u', '/abc\\Tdeff/u', '/abc\\Udeff/u', '/abc\\Vdeff/u', '/abc\\Ydeff/u', '/abc\\Zdeff/u'], $ERROR, PARSE_MODE_REGEX, 'escaping a single uc letter in the middle'],
  [['/\\_/u', '/abc\\_/u', '/\\_abcd/u', '/abc\\_abcd/u'], $ERROR, PARSE_MODE_REGEX, '_ is not an escapable char'],
  [['/\\$/u', '/abc\\$/u', '/\\$abcd/u', '/abc\\$abcd/u'], $REGEXU, PARSE_MODE_REGEX, '$ is a syntax char we can escape'],
  // escaping "syntax characters"
  [[`/\\^/u`, `/\\$/u`, `/\\\\/u`, `/\\./u`, `/\\*/u`, `/\\+/u`, `/\\?/u`, `/\\(/u`, `/\\)/u`, `/\\[/u`, `/\\]/u`, `/\\{/u`, `/\\}/u`, `/\\|/u`], $REGEXU, PARSE_MODE_REGEX, 'syntax char escapes'],
  [[`/abc\\^/u`, `/abc\\$/u`, `/abc\\\\/u`, `/abc\\./u`, `/abc\\*/u`, `/abc\\+/u`, `/abc\\?/u`, `/abc\\(/u`, `/abc\\)/u`, `/abc\\[/u`, `/abc\\]/u`, `/abc\\{/u`, `/abc\\}/u`, `/abc\\|/u`], $REGEXU, PARSE_MODE_REGEX, 'syntax char escapes with prefix'],
  [[`/\\^def/u`, `/\\$def/u`, `/\\\\def/u`, `/\\.def/u`, `/\\*def/u`, `/\\+def/u`, `/\\?def/u`, `/\\(def/u`, `/\\)def/u`, `/\\[def/u`, `/\\]def/u`, `/\\{def/u`, `/\\}def/u`, `/\\|def/u`], $REGEXU, PARSE_MODE_REGEX, 'syntax char escapes with suffix'],
  [[`/\\'/u`, `/\\"/u`, `/\\\`/u`], $ERROR, PARSE_MODE_REGEX, 'typical string escapes dont work in unicode regexes'],
  [['/^/u', '/$/u', '/./u'], $REGEXU, PARSE_MODE_REGEX, 'off to a good start'],
  [['/+/u', '/?/u', '/)/u', '/]/u', '/{/u', '/}/u'], $ERROR, PARSE_MODE_REGEX, 'off to a bad start'],
  [['/|/u'], $REGEXU, PARSE_MODE_REGEX, 'empty or is okay'],
  [['/a|(|)/u', '/a|(|)/u'], $REGEXU, PARSE_MODE_REGEX, 'group with weird or is okay'],
  [['/a|*/u', '/a|+/u', '/a|?/u', '/a|)/u', '/a|]/u', '/a|{/u', '/a|}/u'], $ERROR, PARSE_MODE_REGEX, 'and you started so well'],
  [['/a(*)/u', '/a(+)/u', '/a(?)/u', '/a|(])/u', '/a|({)/u', '/a|(})/u'], $ERROR, PARSE_MODE_REGEX, 'wrapped syntax char start'],
  [['/\\/u', '/a|\\/u'], $ERROR, PARSE_MODE_REGEX, '(eol/eof case)', 'suffixsp'],
  ['/a||/u', $REGEXU, PARSE_MODE_REGEX, 'is okay'],
  // \c<x>
  [['/\\ca/u', '/\\cb/u', '/\\cd/u', '/\\ce/u', '/\\cf/u', '/\\cg/u', '/\\ch/u', '/\\ci/u', '/\\cj/u', '/\\ck/u', '/\\cl/u', '/\\cm/u', '/\\cn/u', '/\\co/u', '/\\cp/u', '/\\cq/u', '/\\cr/u', '/\\cs/u', '/\\ct/u', '/\\cu/u', '/\\cv/u', '/\\cw/u', '/\\cx/u', '/\\cy/u', '/\\cz/u'], $REGEXU, PARSE_MODE_REGEX, 'control character lc'],
  [['/\\cA/u', '/\\cB/u', '/\\cD/u', '/\\cE/u', '/\\cF/u', '/\\cG/u', '/\\cH/u', '/\\cI/u', '/\\cJ/u', '/\\cK/u', '/\\cL/u', '/\\cM/u', '/\\cN/u', '/\\cO/u', '/\\cP/u', '/\\cQ/u', '/\\cR/u', '/\\cS/u', '/\\cT/u', '/\\cU/u', '/\\cV/u', '/\\cW/u', '/\\cX/u', '/\\cY/u', '/\\cZ/u'], $REGEXU, PARSE_MODE_REGEX, 'control character uc'],
  // hex escapes
  [['/\\x01/u', '/\\x12/u', '/\\x23/u', '/\\x34/u', '/\\x45/u', '/\\x56/u', '/\\x67/u', '/\\x78/u', '/\\x89/u', '/\\x90/u'], $REGEXU, PARSE_MODE_REGEX, 'valid hex escapes'],
  [['/\\xa1/u', '/\\xb2/u', '/\\xc3/u', '/\\x3d/u', '/\\x4e/u', '/\\x5f/u', '/\\x6A/u', '/\\xbB/u', '/\\xCD/u', '/\\xEF/u'], $REGEXU, PARSE_MODE_REGEX, 'valid hex escapes'],
  [['/\\x/u', '/\\x0/u', '/\\x1/u', '/\\x2/u', '/\\x3/u', '/\\x4/u', '/\\x5/u', '/\\x6/u', '/\\x7/u', '/\\x8/u', '/\\x9/u'], $ERROR, PARSE_MODE_REGEX, 'invalid hex escape with one char'],
  // digit escape
  // digit escape / backreferences
  [['/\\0/u', '/a\\0/u', '/\\0b/u', '/a\\0b/u', '/(a)\\0/u', '/\\0(b)/u', '/(\\0)/u', '/(0\\0)/u', '/(1\\0)/u'], $REGEXU, PARSE_MODE_REGEX, 'escaped zero is a NUL and not a back reference'],
  [['/\\01/u', '/a\\02/u', '/\\03b/u', '/a\\04b/u', '/(a)\\05/u', '/\\06(b)/u', '/(\\07)/u', '/\\08/u', '/\\09/u', '/\\00/u'], $ERROR, PARSE_MODE_REGEX, 'escaped zero can not be followed by another digit'],
  [['/\\0', '/a\\0', '/\\0b', '/a\\0b', '/(a)\\0', '/\\0(b)', '/(\\0)'], $ERROR, PARSE_MODE_REGEX, 'escaped zero at eol/eof', 'suffixsp'],
  [['/\\01', '/a\\02', '/\\03b', '/a\\04b', '/(a)\\05', '/\\06(b)', '/(\\07)', '/\\08', '/\\09', '/\\00'], $ERROR, PARSE_MODE_REGEX, 'escaped zero at eol/eof', 'suffixsp'],
  [['/\\1(a)/u', '/(a)\\1/u', '/(\\1)/u', '/\\1x(a)/u', '/(a)x\\1/u', '/(a\\1b)/u', '/0\\1(a)/u', '/4\\1(a)/u', '/(a)|\\1/u', '/\\1|(a)/u', '/(\\1|a)/u', '/(a|\\1)/u'], $REGEXU, PARSE_MODE_REGEX, 'backreference anywhere with 1 capturing group'],
  [['/\\1(a)', '/(a)\\1', '/(\\1)', '/\\1x(a)', '/(a)x\\1', '/(a\\1b)', '/0\\1(a)', '/4\\1(a)', '/(a)|\\1', '/\\1|(a)', '/(\\1|a)', '/(a|\\1)'], $ERROR, PARSE_MODE_REGEX, 'backreference anywhere with eol/eof', 'suffixsp'],
  [['/\\2(a)/u', '/(a)\\3/u', '/(\\4)/u', '/\\5x(a)/u', '/(a)x\\6/u', '/(a\\7b)/u', '/0\\8(a)/u', '/4\\9(a)/u', '/(a)|\\10/u', '/\\11|(a)/u', '/(\\12|a)/u', '/(a|\\13)/u'], $ERROR, PARSE_MODE_REGEX, 'illegal backreference indexes'],
  [[
    '/\\0/u', '/(a)\\0/u',
    '/(a)\\1/u', '/((a))\\1/u',
    '/((a))\\2/u', '/(((a)))\\2/u',
    '/(((a)))\\3/u', '/((((a))))\\3/u',
    '/((((a))))\\4/u', '/(((((a)))))\\4/u',
    '/(((((a)))))\\5/u', '/((((((a))))))\\5/u',
    '/((((((a))))))\\6/u', '/(((((((a)))))))\\6/u',
    '/(((((((a)))))))\\7/u', '/((((((((a))))))))\\7/u',
    '/((((((((a))))))))\\8/u', '/(((((((((a)))))))))\\8/u',
    '/(((((((((a)))))))))\\9/u', '/((((((((((a))))))))))\\9/u',
    '/((((((((((a))))))))))\\10/u', '/(((((((((((a)))))))))))\\10/u',
    '/(((((((((((a)))))))))))\\11/u', '/((((((((((((a))))))))))))\\11/u',
    '/((((((((((((a))))))))))))\\12/u', '/(((((((((((((a)))))))))))))\\12/u',
    '/(((((((((((((a)))))))))))))\\13/u', '/((((((((((((((a))))))))))))))\\13/u',
    '/((((((((((((((a))))))))))))))\\14/u', '/(((((((((((((((a)))))))))))))))\\14/u',
    '/(((((((((((((((a)))))))))))))))\\15/u', '/((((((((((((((((a))))))))))))))))\\15/u',
    '/((((((((((((((((a))))))))))))))))\\16/u', '/(((((((((((((((((a)))))))))))))))))\\16/u',
    '/(((((((((((((((((a)))))))))))))))))\\17/u', '/((((((((((((((((((a))))))))))))))))))\\17/u',
    '/((((((((((((((((((a))))))))))))))))))\\18/u', '/(((((((((((((((((((a)))))))))))))))))))\\18/u',
    '/(((((((((((((((((((a)))))))))))))))))))\\19/u', '/((((((((((((((((((((a))))))))))))))))))))\\19/u',
    '/((((((((((((((((((((a))))))))))))))))))))\\20/u', '/(((((((((((((((((((((a)))))))))))))))))))))\\20/u',
  ], $REGEXU, PARSE_MODE_REGEX, '0 to 20 matching groups with as many or as many plus 1 groups (tests all digits for escaping one or two digits)'],
  [[
    '/a\\1/u',
    '/(a)\\2/u',
    '/((a))\\3/u',
    '/(((a)))\\4/u',
    '/((((a))))\\5/u',
    '/(((((a)))))\\6/u',
    '/((((((a))))))\\7/u',
    '/(((((((a)))))))\\8/u',
    '/((((((((a))))))))\\9/u',
    '/(((((((((a)))))))))\\10/u',
    '/((((((((((a))))))))))\\11/u',
    '/(((((((((((a)))))))))))\\12/u',
    '/((((((((((((a))))))))))))\\13/u',
    '/(((((((((((((a)))))))))))))\\14/u',
    '/((((((((((((((a))))))))))))))\\15/u',
    '/(((((((((((((((a)))))))))))))))\\16/u',
    '/((((((((((((((((a))))))))))))))))\\17/u',
    '/(((((((((((((((((a)))))))))))))))))\\18/u',
    '/((((((((((((((((((a))))))))))))))))))\\19/u',
    '/(((((((((((((((((((a)))))))))))))))))))\\20/u',
    '/((((((((((((((((((((a))))))))))))))))))))\\21/u',
  ], $ERROR, PARSE_MODE_REGEX, '1 to 21 matching groups with one too few groups'],
  // unicode quad escapes (more relevant for u-mode but still good to have in both). see also the class escapes
  [['/\\u1234/u', '/x\\u0567/u', '/\\uf89ay/u', '/x\\ubcdey/u'], $REGEXU, PARSE_MODE_REGEX, 'non surrogate'],
  //// surrogate stuff
  [['/\\ud800/u', '/x\\ud810/u', '/\\ud900y/u', '/x\\udabcy/u', '/x\\udabcy/ug', '/x\\udabcy/um', '/x\\udabcy/iuy'], $REGEXU, PARSE_MODE_REGEX, 'lead surrogate'],
  [['/\\ud800\\ud800/u', '/x\\ud810\\ud810/u', '/\\ud900\\ud900y/u', '/x\\udabc\\udabcy/u'], $REGEXU, PARSE_MODE_REGEX, 'lead + lead surrogate'],
  [['/\\udc00/u', '/x\\udc10/u', '/\\udd00y/u', '/x\\udebcy/u', '/x\\udebcy/gu', '/x\\udebcy/ium', '/x\\udebcy/uy'], $REGEXU, PARSE_MODE_REGEX, 'trail surrogate'],
  [['/\\udc00\\udc00/u', '/x\\udc10\\udc10/u', '/\\udd00\\udd00y/u', '/x\\udebc\\udebcy/u', '/x\\udebc\\udebcy/iu'], $REGEXU, PARSE_MODE_REGEX, 'trail + trail surrogate'],
  [['/\\ud800\\udc00/u', '/x\\ud810\\udc10/u', '/\\ud900\\udd00y/u', '/x\\udabc\\udebcy/u', '/x\\udabc\\udebcy/ug'], $REGEXU, PARSE_MODE_REGEX, 'lead + trail surrogate'],
  [['/\\u1234\\ud800/u', '/x\\u0567\\ud810/u', '/\\uf89a\\ud900y/u', '/x\\ubcde\\udabcy/u', '/x\\ubcde\\udabcy/mu'], $REGEXU, PARSE_MODE_REGEX, 'non + lead surrogate'],
  [['/\\u1234\\udc00/u', '/x\\u0567\\udc10/u', '/\\uf89a\\udd00y/u', '/x\\ubcde\\udebcy/u', '/x\\ubcde\\udebcy/uy'], $REGEXU, PARSE_MODE_REGEX, 'non + trail pair'],
  [['/\\u1234\\u1234\\udc00/u', '/x\\u0567\\u0567\\udc10/u', '/\\uf89a\\uf89a\\udd00y/u', '/x\\ubcde\\ubcde\\udebcy/u'], $REGEXU, PARSE_MODE_REGEX, 'non + non + trail pair'],
  [['/\\u1234\\udc00\\udc00/u', '/x\\u0567\\udc10\\udc10/u', '/\\uf89a\\udd00\\udd00y/u', '/x\\ubcde\\udebc\\udebcy/u'], $REGEXU, PARSE_MODE_REGEX, 'non + trail + trail pair'],
  [['/\\ud800\\ud800\\udc00/u', '/x\\ud810\\ud810\\udc10/u', '/\\ud900\\ud900\\udd00y/u', '/x\\udabc\\udabc\\udebcy/u'], $REGEXU, PARSE_MODE_REGEX, 'lead + lead + trail surrogate'],
  [['/\\ud800\\udc00\\udc00/u', '/x\\ud810\\udc10\\udc10/u', '/\\ud900\\udd00\\udd00y/u', '/x\\udabc\\udebc\\udebcy/u'], $REGEXU, PARSE_MODE_REGEX, 'lead + trail + trail surrogate'],
  [['/\\ud800\\udc00\\ud800/u', '/x\\ud810\\udc10\\ud810/u', '/\\ud900\\udd00\\ud900y/u', '/x\\udabc\\udebc\\udabcy/u'], $REGEXU, PARSE_MODE_REGEX, 'lead + trail + lead surrogate'],
  //// unicode long escapes (all illegal without u flag)
  [[`/\\u{0123}/u`, `/\\u{4567}/u`, `/\\u{89abc}/u`, `/\\u{defAB}/u`, `/\\u{CDEF}/u`], $REGEXU, PARSE_MODE_REGEX],
  [`/prefix \\u{012345}/u`, $REGEXU, PARSE_MODE_REGEX],
  [`/\\u{012345} postfix/u`, $REGEXU, PARSE_MODE_REGEX],
  [`/\\u{012345}\\u{6789a}/u`, $REGEXU, PARSE_MODE_REGEX],
  [[`/\\u{}/u`, `/\\u{fail}/u`, `/\\u{afail}/u`, `/\\u{0fail}/u`, `/\\u{xxxx}/u`], $ERROR, PARSE_MODE_REGEX, 'long unicode escape bad contents'],
  [[`/\\u{/u`, `/\\u{a/u`, `/\\u{af/u`, `/\\u{012/u`, `/\\u{01234/u`, `/\\u{012345/u`], $ERROR, PARSE_MODE_REGEX, 'unclosed long unicode escapes'],
  [[`/\\u{1}/u`, `/\\u{12}/u`, `/\\u{123}/u`, `/\\u{1234}/u`, `/\\u{12345}/u`, `/\\u{103456}/u`], $REGEXU, PARSE_MODE_REGEX, 'long unicode escapes'],
  [`/\\u{10ffff}/u`, $REGEXU, PARSE_MODE_REGEX, 'It is a Syntax Error if the MV of HexDigits > 1114111.'],
  [`/\\u{110000}/u`, $ERROR, PARSE_MODE_REGEX, 'It is a Syntax Error if the MV of HexDigits > 1114111.'],
  [`/\\u{0000000000000000000010ffff}/u`, $REGEXU, PARSE_MODE_REGEX, 'must take care that the hex may still have any number of leading zeroes'],
  [`/\\u{00000000000000000000110000}/u`, $ERROR, PARSE_MODE_REGEX, 'must take care that the hex may still have any number of leading zeroes'],
  // character classes simple
  [[`/[]/u`, `/a[]/u`, `/[]b/u`, `/a[]b/u`], $REGEXU, PARSE_MODE_REGEX, 'empty class is explicitly allowed'],
  [[`/[^]/u`, `/a[^]/u`, `/[^]b/u`, `/a[^]b/u`], $REGEXU, PARSE_MODE_REGEX, 'empty inverted class is explicitly allowed'],
  [[`/[a]/u`, `/[b]/u`, `/[c]/u`, `/[d]/u`, `/[e]/u`, `/[f]/u`, `/[g]/u`, `/[h]/u`, `/[i]/u`, `/[j]/u`, `/[k]/u`, `/[l]/u`, `/[m]/u`, `/[n]/u`, `/[o]/u`, `/[p]/u`, `/[q]/u`, `/[r]/u`, `/[s]/u`, `/[t]/u`, `/[u]/u`, `/[v]/u`, `/[w]/u`, `/[x]/u`, `/[y]/u`, `/[z]/u`], $REGEXU, PARSE_MODE_REGEX, 'simple char class with one char'],
  [[`/[A]/u`, `/[B]/u`, `/[C]/u`, `/[D]/u`, `/[E]/u`, `/[F]/u`, `/[G]/u`, `/[H]/u`, `/[I]/u`, `/[J]/u`, `/[K]/u`, `/[L]/u`, `/[M]/u`, `/[N]/u`, `/[O]/u`, `/[P]/u`, `/[Q]/u`, `/[R]/u`, `/[S]/u`, `/[T]/u`, `/[U]/u`, `/[V]/u`, `/[W]/u`, `/[X]/u`, `/[Y]/u`, `/[Z]/u`], $REGEXU, PARSE_MODE_REGEX, 'simple char class with one char'],
  [[`/[rD]/u`, `/[Kq]/u`, `/[$%]/u`], $REGEXU, PARSE_MODE_REGEX, 'simple char class with two chars'],
  [`/[-]/u`, $REGEXU, PARSE_MODE_REGEX, 'the class with just a dash should be legal'],
  [[`/[-b]/u`, `/[-bcd]/u`], $REGEXU, PARSE_MODE_REGEX, 'leading dash'],
  [[`/[a-]/u`, `/[abc-]/u`], $REGEXU, PARSE_MODE_REGEX, 'trailing dash'],
  [['/[^-J]/ug', '/[^-fdsasgJ]/gu'], $REGEXU, PARSE_MODE_REGEX, 'leading dash with invert'],
  [['/[^J-]/ug', '/[^Jdsads-]/ug'], $REGEXU, PARSE_MODE_REGEX, 'trailing dash with invert'],
  ['/[^--]/ug', $REGEXU, PARSE_MODE_REGEX, 'double dash with invert'],
  ['/[^---]/ug', $REGEXU, PARSE_MODE_REGEX, 'triple dash with invert'],
  // character class escapes (pretty much a repeat of the previous wrapped in [] ...)
  [[`/[\\b]/u`, `/[a\\bc]/u`, `/[\\bc]/u`, `/[a\\bb]/u`], $REGEXU, PARSE_MODE_REGEX, 'class escape b'],
  [[`/[\\-]/u`, `/[a\\-c]/u`, `/[\\-c]/u`, `/[a\\-b]/u`], $REGEXU, PARSE_MODE_REGEX, 'class escape dash valid with u-flag'],
  [`/[b\\-a]/u`, $ERROR, PARSE_MODE_REGEX, 'class escape dash with invalid ranges is illegal'],
  // back references in char class
  [['/[\\0]/u', '/[a\\0]/u', '/[\\0b]/u', '/[a\\0b]/u', '/[0\\0b]/u', '/[1\\0b]/u'], $REGEXU, PARSE_MODE_REGEX, 'NUL escape is ok in char class'],
  [['/[\\1]/u', '/[\\2]/u', '/[\\3]/u', '/[\\4]/u', '/[\\5]/u', '/[\\6]/u', '/[\\7]/u', '/[\\8]/u', '/[\\9]/u'], $ERROR, PARSE_MODE_REGEX, 'non-zero digit escapes are illegal in char class'],
  [['/[\\00]/u', '/[\\01]/u', '/[\\02]/u', '/[\\03]/u', '/[\\04]/u', '/[\\05]/u', '/[\\06]/u', '/[\\07]/u', '/[\\08]/u', '/[\\09]/u'], $ERROR, PARSE_MODE_REGEX, 'slash 0 can never be followed by another digit'],
  [['/[\\90]/u', '/[\\12]/u', '/[\\23]/u', '/[\\34]/u', '/[\\45]/u', '/[\\56]/u', '/[\\67]/u', '/[\\78]/u', '/[\\89]/u', '/[\\91]/u'], $ERROR, PARSE_MODE_REGEX, 'non-zero digit escapes are illegal in char class'],
  [['/[\\0', '/[\\1', '/[\\2', '/[\\3', '/[\\4', '/[\\5', '/[\\6', '/[\\7', '/[\\8', '/[\\9'], $ERROR, PARSE_MODE_REGEX, 'digit escapes at eol/eof', 'suffixsp'],
  // char escapes in char class
  [['/[\\d]/u', '/[\\D]/u', '/[\\f]/u', '/[\\n]/u', '/[\\r]/u', '/[\\s]/u', '/[\\S]/u', '/[\\t]/u', '/[\\v]/u', '/[\\w]/u', '/[\\W]/u'], $REGEXU, PARSE_MODE_REGEX, 'only escaping a single letter'],
  [['/[abc\\d]/u', '/[abc\\D]/u', '/[abc\\f]/u', '/[abc\\n]/u', '/[abc\\r]/u', '/[abc\\s]/u', '/[abc\\S]/u', '/[abc\\t]/u', '/[abc\\v]/u', '/[abc\\w]/u', '/[abc\\W]/u'], $REGEXU, PARSE_MODE_REGEX, 'escaping a prefixed single letter'],
  [['/[\\fabcd]/u', '/[\\dabcd]/u', '/[\\Dabcd]/u', '/[\\nabcd]/u', '/[\\rabcd]/u', '/[\\sabcd]/u', '/[\\Sabcd]/u', '/[\\tabcd]/u', '/[\\vabcd]/u', '/[\\wabcd]/u', '/[\\Wabcd]/u'], $REGEXU, PARSE_MODE_REGEX, 'escaping a suffixed single letter'],
  [['/[abc\\fdeff]/u', '/[abc\\ddeff]/u', '/[abc\\Ddeff]/u', '/[abc\\ndeff]/u', '/[abc\\rdeff]/u', '/[abc\\sdeff]/u', '/[abc\\Sdeff]/u', '/[abc\\tdeff]/u', '/[abc\\vdeff]/u', '/[abc\\wdeff]/u', '/[abc\\Wdeff]/u'], $REGEXU, PARSE_MODE_REGEX, 'escaping a single letter in the middle'],
  [['/[\\a]/u', '/[\\e]/u', '/[\\g]/u', '/[\\h]/u', '/[\\i]/u', '/[\\j]/u', '/[\\k]/u', '/[\\l]/u', '/[\\m]/u', '/[\\o]/u', '/[\\p]/u', '/[\\q]/u', '/[\\u]/u', '/[\\x]/u', '/[\\y]/u', '/[\\z]/u'], $ERROR, PARSE_MODE_REGEX, 'only escaping a single lc letter'],
  [['/[\\A]/u', '/[\\E]/u', '/[\\F]/u', '/[\\G]/u', '/[\\H]/u', '/[\\I]/u', '/[\\J]/u', '/[\\K]/u', '/[\\L]/u', '/[\\M]/u', '/[\\N]/u', '/[\\O]/u', '/[\\P]/u', '/[\\Q]/u', '/[\\R]/u', '/[\\T]/u', '/[\\U]/u', '/[\\V]/u', '/[\\X]/u', '/[\\Y]/u', '/[\\Z]/u'], $ERROR, PARSE_MODE_REGEX, 'only escaping a single uc letter'],
  [['/[abc\\a]/u', '/[abc\\e]/u', '/[abc\\g]/u', '/[abc\\h]/u', '/[abc\\i]/u', '/[abc\\j]/u', '/[abc\\k]/u', '/[abc\\l]/u', '/[abc\\m]/u', '/[abc\\o]/u', '/[abc\\p]/u', '/[abc\\q]/u', '/[abc\\u]/u', '/[abc\\x]/u', '/[abc\\y]/u', '/[abc\\z]/u'], $ERROR, PARSE_MODE_REGEX, 'escaping a prefixed single lc letter'],
  [['/[abc\\A]/u', '/[abc\\E]/u', '/[abc\\F]/u', '/[abc\\G]/u', '/[abc\\H]/u', '/[abc\\I]/u', '/[abc\\J]/u', '/[abc\\K]/u', '/[abc\\L]/u', '/[abc\\M]/u', '/[abc\\N]/u', '/[abc\\O]/u', '/[abc\\P]/u', '/[abc\\Q]/u', '/[abc\\R]/u', '/[abc\\T]/u', '/[abc\\U]/u', '/[abc\\V]/u', '/[abc\\X]/u', '/[abc\\Y]/u', '/[abc\\Z]/u'], $ERROR, PARSE_MODE_REGEX, 'escaping a prefixed single uc letter'],
  [['/[\\aabcd]/u', '/[\\eabcd]/u', '/[\\gabcd]/u', '/[\\habcd]/u', '/[\\iabcd]/u', '/[\\jabcd]/u', '/[\\kabcd]/u', '/[\\labcd]/u', '/[\\mabcd]/u', '/[\\oabcd]/u', '/[\\pabcd]/u', '/[\\qabcd]/u', '/[\\yabcd]/u', '/[\\zabcd]/u'], $ERROR, PARSE_MODE_REGEX, 'escaping a suffixed single lc letter'],
  [['/[\\Aabcd]/u', '/[\\Cabcd]/u', '/[\\Eabcd]/u', '/[\\Fabcd]/u', '/[\\Gabcd]/u', '/[\\Habcd]/u', '/[\\Iabcd]/u', '/[\\Jabcd]/u', '/[\\Kabcd]/u', '/[\\Labcd]/u', '/[\\Mabcd]/u', '/[\\Nabcd]/u', '/[\\Oabcd]/u', '/[\\Pabcd]/u', '/[\\Qabcd]/u', '/[\\Rabcd]/u', '/[\\Tabcd]/u', '/[\\Uabcd]/u', '/[\\Vabcd]/u', '/[\\Xabcd]/u', '/[\\Yabcd]/u', '/[\\Zabcd]/u'], $ERROR, PARSE_MODE_REGEX, 'escaping a suffixed single uc letter'],
  [['/[abc\\adeff]/u', '/[abc\\gdeff]/u', '/[abc\\hdeff]/u', '/[abc\\ideff]/u', '/[abc\\jdeff]/u', '/[abc\\kdeff]/u', '/[abc\\ldeff]/u', '/[abc\\mdeff]/u', '/[abc\\odeff]/u', '/[abc\\pdeff]/u', '/[abc\\qdeff]/u', '/[abc\\ydeff]/u', '/[abc\\zdeff]/u'], $ERROR, PARSE_MODE_REGEX, 'escaping a single lc letter in the middle'],
  [['/[abc\\Adeff]/u', '/[abc\\Cdeff]/u', '/[abc\\Edeff]/u', '/[abc\\Fdeff]/u', '/[abc\\Gdeff]/u', '/[abc\\Hdeff]/u', '/[abc\\Ideff]/u', '/[abc\\Jdeff]/u', '/[abc\\Kdeff]/u', '/[abc\\Ldeff]/u', '/[abc\\Mdeff]/u', '/[abc\\Ndeff]/u', '/[abc\\Odeff]/u', '/[abc\\Pdeff]/u', '/[abc\\Qdeff]/u', '/[abc\\Rdeff]/u', '/[abc\\Tdeff]/u', '/[abc\\Udeff]/u', '/[abc\\Vdeff]/u', '/[abc\\Ydeff]/u', '/[abc\\Zdeff]/u'], $ERROR, PARSE_MODE_REGEX, 'escaping a single uc letter in the middle'],
  [['/[\\_]/u', '/[abc\\_]/u', '/[\\_abcd]/u', '/[abc\\_abcd]/u'], $ERROR, PARSE_MODE_REGEX, '_ is not an escapable char'],
  [['/[\\$]/u', '/[abc\\$]/u', '/[\\$abcd]/u', '/[abc\\$abcd]/u'], $REGEXU, PARSE_MODE_REGEX, '$ is a syntax char we can escape'],
  [[`/[\\^]/u`, `/[\\$]/u`, `/[\\\\]/u`, `/[\\.]/u`, `/[\\*]/u`, `/[\\+]/u`, `/[\\?]/u`, `/[\\(]/u`, `/[\\)]/u`, `/[\\[]/u`, `/[\\]]/u`, `/[\\{]/u`, `/[\\}]/u`, `/[\\|]/u`], $REGEXU, PARSE_MODE_REGEX, 'syntax char escapes'],
  [[`/[abc\\^]/u`, `/[abc\\$]/u`, `/[abc\\\\]/u`, `/[abc\\.]/u`, `/[abc\\*]/u`, `/[abc\\+]/u`, `/[abc\\?]/u`, `/[abc\\(]/u`, `/[abc\\)]/u`, `/[abc\\[]/u`, `/[abc\\]]/u`, `/[abc\\{]/u`, `/[abc\\}]/u`, `/[abc\\|]/u`], $REGEXU, PARSE_MODE_REGEX, 'syntax char escapes with prefix'],
  [[`/[\\^def]/u`, `/[\\$def]/u`, `/[\\\\def]/u`, `/[\\.def]/u`, `/[\\*def]/u`, `/[\\+def]/u`, `/[\\?def]/u`, `/[\\(def]/u`, `/[\\)def]/u`, `/[\\[def]/u`, `/[\\]def]/u`, `/[\\{def]/u`, `/[\\}def]/u`, `/[\\|def]/u`], $REGEXU, PARSE_MODE_REGEX, 'syntax char escapes with suffix'],
  [[`/[\\^`, `/[\\$`, `/[\\\\`, `/[\\.`, `/[\\*`, `/[\\+`, `/[\\?`, `/[\\(`, `/[\\)`, `/[\\]`, `/[\\]`, `/[\\{`, `/[\\}`, `/[\\|`], $ERROR, PARSE_MODE_REGEX, 'syntax char escapes with early eol/eof', 'suffixsp'],
  [[`/[\\']/u`, `/[\\"]/u`, `/[\\\`]/u`], $ERROR, PARSE_MODE_REGEX, 'typical string escapes dont work in regexes'],
  [['/[\\ca]/u', '/[\\cb]/u', '/[\\cd]/u', '/[\\ce]/u', '/[\\cf]/u', '/[\\cg]/u', '/[\\ch]/u', '/[\\ci]/u', '/[\\cj]/u', '/[\\ck]/u', '/[\\cl]/u', '/[\\cm]/u', '/[\\cn]/u', '/[\\co]/u', '/[\\cp]/u', '/[\\cq]/u', '/[\\cr]/u', '/[\\cs]/u', '/[\\ct]/u', '/[\\cu]/u', '/[\\cv]/u', '/[\\cw]/u', '/[\\cx]/u', '/[\\cy]/u', '/[\\cz]/u'], $REGEXU, PARSE_MODE_REGEX, 'control character lc'],
  [['/[\\cA]/u', '/[\\cB]/u', '/[\\cD]/u', '/[\\cE]/u', '/[\\cF]/u', '/[\\cG]/u', '/[\\cH]/u', '/[\\cI]/u', '/[\\cJ]/u', '/[\\cK]/u', '/[\\cL]/u', '/[\\cM]/u', '/[\\cN]/u', '/[\\cO]/u', '/[\\cP]/u', '/[\\cQ]/u', '/[\\cR]/u', '/[\\cS]/u', '/[\\cT]/u', '/[\\cU]/u', '/[\\cV]/u', '/[\\cW]/u', '/[\\cX]/u', '/[\\cY]/u', '/[\\cZ]/u'], $REGEXU, PARSE_MODE_REGEX, 'control character uc'],
  [['/[\\x01]/u', '/[\\xa2]/u', '/[\\xF3]/u', '/[\\x34]/u', '/[\\xC5]/u', '/[\\x5a]/u', '/[\\x67]/u', '/[\\x7D]/u', '/[\\x8f]/u', '/[\\x90]/u'], $REGEXU, PARSE_MODE_REGEX, 'valid hex escapes'],
  [['/[\\xa1]/u', '/[\\xb2]/u', '/[\\xc3]/u', '/[\\x3d]/u', '/[\\x4e]/u', '/[\\x5f]/u', '/[\\x6A]/u', '/[\\xbB]/u', '/[\\xCD]/u', '/[\\xEF]/u'], $REGEXU, PARSE_MODE_REGEX, 'valid hex escapes'],
  [['/[\\x]/u', '/[\\x0]/u', '/[\\x1]/u', '/[\\x2]/u', '/[\\x3]/u', '/[\\x4]/u', '/[\\x5]/u', '/[\\x6]/u', '/[\\x7]/u', '/[\\x8]/u', '/[\\x9]/u'], $ERROR, PARSE_MODE_REGEX, 'invalid hex escape with one char'],
  [['/[\\u1234]/u', '/[x\\u0567]/u', '/[\\uf89ay]/u', '/[x\\ubcdey]/u'], $REGEXU, PARSE_MODE_REGEX, 'non surrogate'],
  [['/[\\ud800]/u', '/[x\\ud810]/u', '/[\\ud900y]/u', '/[x\\udabcy]/u', '/[x\\udabcy]/ug', '/[x\\udabcy]/um', '/[x\\udabcy]/iuy'], $REGEXU, PARSE_MODE_REGEX, 'lead surrogate'],
  [['/[\\ud800\\ud800]/u', '/[x\\ud810\\ud810]/u', '/[\\ud900\\ud900y]/u', '/[x\\udabc\\udabcy]/u'], $REGEXU, PARSE_MODE_REGEX, 'lead + lead surrogate'],
  [['/[\\udc00]/u', '/[x\\udc10]/u', '/[\\udd00y]/u', '/[x\\udebcy]/u', '/[x\\udebcy]/gu', '/[x\\udebcy]/imu', '/[x\\udebcy]/uy'], $REGEXU, PARSE_MODE_REGEX, 'trail surrogate'],
  [['/[\\udc00\\udc00]/u', '/[x\\udc10\\udc10]/u', '/[\\udd00\\udd00y]/u', '/[x\\udebc\\udebcy]/u', '/[x\\udebc\\udebcy]/ui'], $REGEXU, PARSE_MODE_REGEX, 'trail + trail surrogate'],
  [['/[\\ud800\\udc00]/u', '/[x\\ud810\\udc10]/u', '/[\\ud900\\udd00y]/u', '/[x\\udabc\\udebcy]/u', '/[x\\udabc\\udebcy]/ug'], $REGEXU, PARSE_MODE_REGEX, 'lead + trail surrogate'],
  [['/[\\u1234\\ud800]/u', '/[x\\u0567\\ud810]/u', '/[\\uf89a\\ud900y]/u', '/[x\\ubcde\\udabcy]/u', '/[x\\ubcde\\udabcy]/mu'], $REGEXU, PARSE_MODE_REGEX, 'non + lead surrogate'],
  [['/[\\u1234\\udc00]/u', '/[x\\u0567\\udc10]/u', '/[\\uf89a\\udd00y]/u', '/[x\\ubcde\\udebcy]/u', '/[x\\ubcde\\udebcy]/yu'], $REGEXU, PARSE_MODE_REGEX, 'non + trail pair'],
  [['/[\\u1234\\u1234\\udc00]/u', '/[x\\u0567\\u0567\\udc10]/u', '/[\\uf89a\\uf89a\\udd00y]/u', '/[x\\ubcde\\ubcde\\udebcy]/u'], $REGEXU, PARSE_MODE_REGEX, 'non + non + trail pair'],
  [['/[\\u1234\\udc00\\udc00]/u', '/[x\\u0567\\udc10\\udc10]/u', '/[\\uf89a\\udd00\\udd00y]/u', '/[x\\ubcde\\udebc\\udebcy]/u'], $REGEXU, PARSE_MODE_REGEX, 'non + trail + trail pair'],
  [['/[\\ud800\\ud800\\udc00]/u', '/[x\\ud810\\ud810\\udc10]/u', '/[\\ud900\\ud900\\udd00y]/u', '/[x\\udabc\\udabc\\udebcy]/u'], $REGEXU, PARSE_MODE_REGEX, 'lead + lead + trail surrogate'],
  [['/[\\ud800\\udc00\\udc00]/u', '/[x\\ud810\\udc10\\udc10]/u', '/[\\ud900\\udd00\\udd00y]/u', '/[x\\udabc\\udebc\\udebcy]/u'], $REGEXU, PARSE_MODE_REGEX, 'lead + trail + trail surrogate'],
  [['/[\\ud800\\udc00\\ud800]/u', '/[x\\ud810\\udc10\\ud810]/u', '/[\\ud900\\udd00\\ud900y]/u', '/[x\\udabc\\udebc\\udabcy]/u'], $REGEXU, PARSE_MODE_REGEX, 'lead + trail + lead surrogate'],
  [[`/[\\u{0123}]/u`, `/[\\u{4567}]/u`, `/[\\u{89abc}]/u`, `/[\\u{defAB}]/u`, `/[\\u{CDEF}]/u`], $REGEXU, PARSE_MODE_REGEX],
  [`/[prefix \\u{012345}]/u`, $REGEXU, PARSE_MODE_REGEX],
  [`/[\\u{012345} postfix]/u`, $REGEXU, PARSE_MODE_REGEX],
  [`/[\\u{012345}\\u{6789a}]/u`, $REGEXU, PARSE_MODE_REGEX],
  [[`/[\\u{}]/u`, `/[\\u{fail}]/u`, `/[\\u{afail}]/u`, `/[\\u{0fail}]/u`, `/[\\u{xxxx}]/u`], $ERROR, PARSE_MODE_REGEX, 'long unicode escape bad contents'],
  [[`/[\\u{]/u`, `/[\\u{a]/u`, `/[\\u{af]/u`, `/[\\u{012]/u`, `/[\\u{01234]/u`, `/[\\u{012345]/u`], $ERROR, PARSE_MODE_REGEX, 'unclosed long unicode escapes'],
  [[`/[\\u{1}]/u`, `/[\\u{12}]/u`, `/[\\u{123}]/u`, `/[\\u{1234}]/u`, `/[\\u{12345}]/u`, `/[\\u{103456}]/u`], $REGEXU, PARSE_MODE_REGEX, 'long unicode escapes'],
  [[`/[\\u{`, `/[\\u{a`, `/[\\u{af`, `/[\\u{123`, `/[\\u{1234`, `/[\\u{12345`, `/[\\u{103456`], $ERROR, PARSE_MODE_REGEX, 'incomplete long unicode escapes in unclosed string', 'suffixsp'],
  [`/[\\u{10ffff}]/u`, $REGEXU, PARSE_MODE_REGEX, 'It is a Syntax Error if the MV of HexDigits > 1114111.'],
  [[`/[\\u{110000}]/u`, `/[\\u{120000}]/u`, `/[\\u{900000}]/u`, `/[\\u{123456789}]/u`, `/[\\u{ffffffffffffffff}]/u`], $ERROR, PARSE_MODE_REGEX, 'It is a Syntax Error if the MV of HexDigits > 1114111.'],
  [`/[\\u{10000000000000000}]/u`, $ERROR, PARSE_MODE_REGEX, 'regex value that would exceed 32bits'],
  [`/[\\u{fffffffffffffffffffff}]/u`, $ERROR, PARSE_MODE_REGEX, 'regex value that would exceed 32bits'],
  [`/[\\u{0000000000000000000010ffff}]/u`, $REGEXU, PARSE_MODE_REGEX, 'must take care that the hex may still have any number of leading zeroes'],
  [[`/[\\u{00000000000000000000110000}]/u`, `/[\\u{00000000000000000000120000}]/u`, `/[\\u{0000000000123456789}]/u`, `/[\\u{000000ffffffffffffffff}]/u`], $ERROR, PARSE_MODE_REGEX, 'must take care that the hex may still have any number of leading zeroes'],
  [['/[\\da-z]/u', '/[\\DA-Z]/u', '/[\\sa-z]/u', '/[\\SA-S]/u', '/[\\wa-z]/u', '/[\\WA-Z]/u'], $REGEXU, PARSE_MODE_REGEX, 'class escapes are also valid in char classes that contain ranges'],
  [['/[\\d-z]/u', '/[\\D-Z]/u', '/[\\s-z]/u', '/[\\S-S]/u', '/[\\w-z]/u', '/[\\W-Z]/u'], $ERROR, PARSE_MODE_REGEX, 'class escapes are never valid when part of a range'],
  [['/[x\\da-z]/u', '/[x\\DA-Z]/u', '/[x\\sa-z]/u', '/[x\\SA-S]/u', '/[x\\wa-z]/u', '/[x\\WA-Z]/u'], $REGEXU, PARSE_MODE_REGEX, 'with prefix class escapes are also valid in char classes that contain ranges'],
  [['/[x\\d-z]/u', '/[x\\D-Z]/u', '/[x\\s-z]/u', '/[x\\S-S]/u', '/[x\\w-z]/u', '/[x\\W-Z]/u'], $ERROR, PARSE_MODE_REGEX, 'with prefix class escapes are never valid when part of a range'],
  [['/[a-z\\d]/u', '/[A-Z\\D]/u', '/[a-z\\s]/u', '/[A-S\\S]/u', '/[a-z\\w]/u', '/[A-Z\\W]/u'], $REGEXU, PARSE_MODE_REGEX, 'class escapes are also valid in char classes that contain ranges'],
  [['/[a-\\d]/u', '/[A-\\D]/u', '/[a-\\s]/u', '/[A-\\S]/u', '/[a-\\w]/u', '/[A-\\W]/u'], $ERROR, PARSE_MODE_REGEX, 'class escapes are never valid when part of a range'],
  [['/[a-z\\dx]/u', '/[A-Z\\Dx]/u', '/[a-z\\sx]/u', '/[A-S\\Sx]/u', '/[a-z\\wx]/u', '/[A-Z\\Wx]/u'], $REGEXU, PARSE_MODE_REGEX, 'with suffix class escapes are also valid in char classes that contain ranges'],
  [['/[a-\\dx]/u', '/[A-\\Dx]/u', '/[a-\\sx]/u', '/[A-\\Sx]/u', '/[a-\\wx]/u', '/[A-\\Wx]/u'], $ERROR, PARSE_MODE_REGEX, 'with suffix class escapes are never valid when part of a range'],
  ['/\\2(x)/u', $ERROR, PARSE_MODE_REGEX, 'it is an error if a digital non-zero escape evaluates to a number bigger than the number of groups'],
  // surrogate pairs revisited
  ['/[1-9]/u', $REGEXU, PARSE_MODE_REGEX, 'char class ranges should be lo-hi'],
  ['/[9-1]/u', $ERROR, PARSE_MODE_REGEX, 'char class ranges should be lo-hi and it is a syntax error otherwise'],
  ['/[\\u5000-\\u6000]/u', $REGEXU, PARSE_MODE_REGEX, 'escapes are no problem for ranges'],
  ['/[\\u6000-\\u5000]/u', $ERROR, PARSE_MODE_REGEX, 'escapes are also bound by the lo-hi rule'],
  ['/[\\uD83D\\uDCA9]/u', $REGEXU, PARSE_MODE_REGEX, 'Unicode Character PILE OF POO (U+1F4A9) surrogate pair base test case. sans u-flag this matches two individual chars'],
  ['/[\\uD83D\\uDCAB]/u', $REGEXU, PARSE_MODE_REGEX, 'Unicode Character DIZZY SYMBOL (U+1F4AB) surrogate pair base test case. sans u-flag this matches two individual chars'],
  [['/[\\uD83D\\uDCA9-\\uD83D\\uDCAB]/u', '/[\uD83D\\uDCA9-\\uD83D\\uDCAB]/u', '/[\\uD83D\uDCA9-\\uD83D\\uDCAB]/u', '/[\\uD83D\\uDCA9-\uD83D\\uDCAB]/u', '/[\\uD83D\\uDCA9-\\uD83D\uDCAB]/u', '/[\uD83D\uDCA9-\\uD83D\\uDCAB]/u', '/[\uD83D\\uDCA9-\uD83D\\uDCAB]/u', '/[\uD83D\\uDCA9-\\uD83D\uDCAB]/u', '/[\\uD83D\uDCA9-\uD83D\\uDCAB]/u', '/[\\uD83D\uDCA9-\\uD83D\uDCAB]/u', '/[\\uD83D\\uDCA9-\uD83D\uDCAB]/u', '/[\uD83D\uDCA9-\uD83D\\uDCAB]/u', '/[\uD83D\uDCA9-\\uD83D\uDCAB]/u', '/[\\uD83D\uDCA9-\uD83D\uDCAB]/u', '/[\uD83D\uDCA9-\uD83D\uDCAB]/u'], $REGEXU, PARSE_MODE_REGEX, 'range poo to dizzy some are escapes and some are literal but surrogates should still work (and error without u flag)'],
  [['/[\\x01-\\x17]/u', '/[\\u0001-\\x17]/u', '/[\\x01-\\u0007]/u', '/[\\x01-\\x17]/u', '/[A-\\cH]/u', '/[\\cH-Z]/u'], $REGEXU, PARSE_MODE_REGEX, 'ranges using various escapes'],
  [['/[\\u{5}-1]/u', '/[\\x01-\\u{347}]/u'], $REGEXU, PARSE_MODE_REGEX, 'ranges using various escapes and long unicode escapes'],
  [['/[1-\\u{500}]/u', '/\\u{01}-\\x07/u'], $REGEXU, PARSE_MODE_REGEX, 'various ranges using escapes but using long unicodes'],
  [['/[--0]/u', '/[+--]/u'], $REGEXU, PARSE_MODE_REGEX, 'dash is also a dash at the start or end of a range'],
  [['/[-+]/u', '/[+-]/u', '/[---+]/u', '/[---0]/u'], $REGEXU, PARSE_MODE_REGEX, 'positive dash edge cases'],
  ['/[-]/u', $REGEXU, PARSE_MODE_REGEX, 'a dash'],
  ['/[--]/u', $REGEXU, PARSE_MODE_REGEX, 'no range, just twice the dash'],
  ['/[---]/u', $REGEXU, PARSE_MODE_REGEX, 'a range that starts and ends with a dash'],
  ['/[----]/u', $REGEXU, PARSE_MODE_REGEX, 'a range that starts and ends with a dash and then followed by a single character that is also a dash'],
  ['/[-----]/u', $REGEXU, PARSE_MODE_REGEX, 'a range that starts and ends with a dash and then followed by a single character that is also a dash and ends with a dash because they cant make another range'],
  ['/[------]/u', $REGEXU, PARSE_MODE_REGEX, 'twice the range that starts and ends with a dash can i stop now?'],
  ['/[-------]/u', $REGEXU, PARSE_MODE_REGEX, 'certainly we can proof by induction now'],
  ['/[--------]/u', $REGEXU, PARSE_MODE_REGEX, 'yeah'],
  ['/[---------]/u', $REGEXU, PARSE_MODE_REGEX, 'this is n+2 so qed'],
  [['/[--+]/u', '/[0--]/u', '/[x---]/u', '/[0---]/u'], $ERROR, PARSE_MODE_REGEX, 'negative dash edge cases'],
  ['/[x-\\uD83D\\uDE07--+]/u', $ERROR, PARSE_MODE_REGEX, 'range with a surrogate on the right; with u flag causing two valid ranges (x-D83DDE07 and --+), without u flag causing a valid range (x-D83D) and an invalid range (DE07--)'],
  ['/[x-\\uD83D\\uDE07--x-\\uD83D\\uDE07--]/u', $ERROR, PARSE_MODE_REGEX, 'more silliness'],
  // capturing group
  [['/(b)/u', '/a(b)/u', '/(b)c/u', '/a(b)c/u'], $REGEXU, PARSE_MODE_REGEX],
  [['/(b)', '/a(b)', '/(b)c', '/a(b)c'], $ERROR, PARSE_MODE_REGEX, 'unclosed regex', 'suffixsp'],
  ['/(', $ERROR, PARSE_MODE_REGEX, 'eol/eof in a group', 'suffixsp'],
  ['/)/u', $ERROR, PARSE_MODE_REGEX, 'closing paren without opener must be escaped'],
  ['/)', $ERROR, PARSE_MODE_REGEX, 'closing paren without opener must be escaped at eol/eof', 'suffixsp'],
  [['/((b))/u', '/(a(b))/u', '/a(a(b))/u', '/(a(b))c/u', '/a(a(b))c/u', '/((b)c)/u', '/a((b)c)/u', '/((b)c)c/u', '/a((b)c)c/u', '/(a(b)c)/u', '/a(a(b)c)/u', '/(a(b)c)c/u', '/a(a(b)c)c/u'], $REGEXU, PARSE_MODE_REGEX],
  [['/((b', '/((b)', '/((b))', '/(a(b', '/(a(b)', '/(a(b))', '/a(a(b', '/a(a(b)', '/a(a(b))'], $ERROR, PARSE_MODE_REGEX, 'unclosed regex', 'suffixsp'],
  ['/(?x)/u', $ERROR, PARSE_MODE_REGEX, 'qmark is invalid without proper next char'],
  ['/(?', $ERROR, PARSE_MODE_REGEX, 'qmark is invalid without proper next char at eol/eof', 'suffixsp'],
  ['/()/u', $REGEXU, PARSE_MODE_REGEX, 'capturing group can be empty'],
  // non-capturing group
  [['/(?:b)/u', '/a(?:b)/u', '/(?:b)c/u', '/a(?:b)c/u'], $REGEXU, PARSE_MODE_REGEX],
  [['/(?:b)', '/a(?:b)', '/(?:b)c', '/a(?:b)c'], $ERROR, PARSE_MODE_REGEX, 'unclosed regex', 'suffixsp'],
  [['/(?:(?:b))/u', '/(?:a(?:b))/u', '/a(?:a(?:b))/u', '/(?:a(?:b))c/u', '/a(?:a(?:b))c/u', '/(?:(?:b)c)/u', '/a(?:(?:b)c)/u', '/(?:(?:b)c)c/u', '/a(?:(?:b)c)c/u', '/(?:a(?:b)c)/u', '/a(?:a(?:b)c)/u', '/(?:a(?:b)c)c/u', '/a(?:a(?:b)c)c/u'], $REGEXU, PARSE_MODE_REGEX],
  [['/(?:(?:b', '/(?:(?:b)', '/(?:(?:b))', '/(?:a(?:b', '/(?:a(?:b)', '/(?:a(?:b))', '/a(?:a(?:b', '/a(?:a(?:b)', '/a(?:a(?:b))'], $ERROR, PARSE_MODE_REGEX, 'unclosed regex', 'suffixsp'],
  ['/(?:)/u', $REGEXU, PARSE_MODE_REGEX, 'non capturing group can be empty'],
  // lookahead
  [['/(?=b)/u', '/a(?=b)/u', '/(?=b)c/u', '/a(?=b)c/u'], $REGEXU, PARSE_MODE_REGEX],
  [['/(?=b)', '/a(?=b)', '/(?=b)c', '/a(?=b)c'], $ERROR, PARSE_MODE_REGEX, 'unclosed regex', 'suffixsp'],
  [['/(?=(?=b))/u', '/(?=a(?=b))/u', '/a(?=a(?=b))/u', '/(?=a(?=b))c/u', '/a(?=a(?=b))c/u', '/(?=(?=b)c)/u', '/a(?=(?=b)c)/u', '/(?=(?=b)c)c/u', '/a(?=(?=b)c)c/u', '/(?=a(?=b)c)/u', '/a(?=a(?=b)c)/u', '/(?=a(?=b)c)c/u', '/a(?=a(?=b)c)c/u'], $REGEXU, PARSE_MODE_REGEX],
  [['/(?=(?=b', '/(?=(?=b)', '/(?=(?=b))', '/(?=a(?=b', '/(?=a(?=b)', '/(?=a(?=b))', '/a(?=a(?=b', '/a(?=a(?=b)', '/a(?=a(?=b))'], $ERROR, PARSE_MODE_REGEX, 'unclosed regex', 'suffixsp'],
  ['/(?=)/u', $REGEXU, PARSE_MODE_REGEX, 'lookahead can be empty'],
  // negative capturing group
  [['/(?!b)/u', '/a(?!b)/u', '/(?!b)c/u', '/a(?!b)c/u'], $REGEXU, PARSE_MODE_REGEX],
  [['/(?!b)', '/a(?!b)', '/(?!b)c', '/a(?!b)c'], $ERROR, PARSE_MODE_REGEX, 'unclosed regex', 'suffixsp'],
  [['/(?!(?!b))/u', '/(?!a(?!b))/u', '/a(?!a(?!b))/u', '/(?!a(?!b))c/u', '/a(?!a(?!b))c/u', '/(?!(?!b)c)/u', '/a(?!(?!b)c)/u', '/(?!(?!b)c)c/u', '/a(?!(?!b)c)c/u', '/(?!a(?!b)c)/u', '/a(?!a(?!b)c)/u', '/(?!a(?!b)c)c/u', '/a(?!a(?!b)c)c/u'], $REGEXU, PARSE_MODE_REGEX],
  [['/(?!(?!b', '/(?!(?!b)', '/(?!(?!b))', '/(?!a(?!b', '/(?!a(?!b)', '/(?!a(?!b))', '/a(?!a(?!b', '/a(?!a(?!b)', '/a(?!a(?!b))'], $ERROR, PARSE_MODE_REGEX, 'unclosed regex', 'suffixsp'],
  ['/(?!)/u', $REGEXU, PARSE_MODE_REGEX, 'inverted lookahead can be empty'],
  // mixed group types
  [[
    '/a(b(c)d)e/u',
    '/a(b(?:c)d)e/u',
    '/a(b(?=c)d)e/u',
    '/a(b(?!c)d)e/u',
    '/a(?:b(c)d)e/u',
    '/a(?:b(?:c)d)e/u',
    '/a(?:b(?=c)d)e/u',
    '/a(?:b(?!c)d)e/u',
    '/a(?=b(c)d)e/u',
    '/a(?=b(?:c)d)e/u',
    '/a(?=b(?=c)d)e/u',
    '/a(?=b(?!c)d)e/u',
    '/a(?!b(c)d)e/u',
    '/a(?!b(?:c)d)e/u',
    '/a(?!b(?=c)d)e/u',
    '/a(?!b(?!c)d)e/u',
  ], $REGEXU, PARSE_MODE_REGEX],
  // unclosed groups
  [[
    '/a(bcde/u',
    '/a(b(cde/u',
    '/a(b(?:cd)e/u',
    '/a(b(?:cde/u',
    '/a(b(?=cd)e/u',
    '/a(b(?=cde/u',
    '/a(b(?!cd)e/u',
    '/a(b(?!cde/u',
    '/a(?:b(cd)e/u',
    '/a(?:b(cde/u',
    '/a(?:b(?:cd)e/u',
    '/a(?:b(?:cde/u',
    '/a(?:b(?=cd)e/u',
    '/a(?:b(?=cde/u',
    '/a(?:b(?!cd)e/u',
    '/a(?:b(?!cde/u',
    '/a(?=b(cd)e/u',
    '/a(?=b(cde/u',
    '/a(?=b(?:cd)e/u',
    '/a(?=b(?:cde/u',
    '/a(?=b(?=cd)e/u',
    '/a(?=b(?=cde/u',
    '/a(?=b(?!cd)e/u',
    '/a(?=b(?!cde/u',
    '/a(?!b(c)de/u',
    '/a(?!b(cde/u',
    '/a(?!b(?:cd)e/u',
    '/a(?!b(?:cde/u',
    '/a(?!b(?=cd)e/u',
    '/a(?!b(?=cde/u',
    '/a(?!b(?!cd)e/u',
    '/a(?!b(?!cde/u',
  ], $ERROR, PARSE_MODE_REGEX],

  // test262
  [[
    '/0{2,1}/u',
    '/^[z-a]$/u',
    '/a**/u', '/a***/u', '/a++/u', '/a+++/u', '/a???/u', '/a????/u',
    '/x{1}{1,}/u', '/x{1,2}{1}/u', '/x{1,}{1}/u', '/x{0,1}{1,}/u',
    //'/*a/', '/**a/',  // these are multi line comments
    '/+a/u', '/++a/u', '/?a/u', '/??a/u',
    '/[b-ac-e]/u', '/[a-dc-b]/u', '/[\\db-G]/u', '/[\\Db-G]/u', '/[\\sb-G]/u', '/[\\Sb-G]/u', '/[\\wb-G]/u', '/[\\Wb-G]/u', '/[\\0b-G]/u', '/[\\10b-G]/u', '/[\\bd-G]/u', '/[\\Bd-G]/u', '/[\\td-G]/u',
    '/[\\nd-G]/u', '/[\\vd-G]/u', '/[\\fd-G]/u', '/[\\rd-G]/u', '/[\\c0001d-G]/u', '/[\\x0061d-G]/u', '/[\\u0061d-G]/u', '/[\\ad-G]/u', '/[c-eb-a]/u', '/[b-G\\d]/u', '/[b-G\\D]/u', '/[b-G\\s]/u',
    '/[b-G\\S]/u', '/[b-G\\w]/u', '/[b-G\\W]/u', '/[b-G\\0]/u', '/[b-G\\10]/u', '/[d-G\\b]/u', '/[d-G\\B]/u', '/[d-G\\t]/u', '/[d-G\\n]/u', '/[d-G\\v]/u', '/[d-G\\f]/u', '/[d-G\\r]/u', '/[d-G\\c0001]/u',
    '/[d-G\\x0061]/u', '/[d-G\\u0061]/u', '/[d-G\\a]/u',
    '/\\\rn/u',
  ], $ERROR, PARSE_MODE_REGEX, 'leading quantifier'],
  [['/abc/au','/abc/ub'], $ERROR, PARSE_MODE_REGEX, 'leading quantifier'],
  [[
    '/(?=.)*/u', '/(?=.)+/u', '/(?=.)?/u', '/(?=.){1}/u',
    '/(?!.)*/u', '/(?!.)+/u', '/(?!.)?/u', '/(?!.){1}/u',
  ], $REGEXU, PARSE_MODE_REGEX, 'leading quantifier'],
  [[
    '/\\b*/u', '/\\b+/u', '/\\b?/u', '/\\b{1}/u', '/\\b**/u', '/\\b++/u', '/\\b?+/u', '/\\b{1}+/u', '/(?=.)**/u', '/(?=.)++/u', '/(?=.)?+/u', '/(?=.){1}+/u',
    '/\\B*/u', '/\\B+/u', '/\\B?/u', '/\\B{1}/u', '/\\B**/u', '/\\B++/u', '/\\B?+/u', '/\\B{1}+/u', '/(?!.)**/u', '/(?!.)++/u', '/(?!.)?+/u', '/(?!.){1}+/u',
  ], $ERROR, PARSE_MODE_REGEX, 'leading quantifier with flag'],

  [['/\\1/u', '/\\2/u', '/\\3/u', '/\\4/u', '/\\5/u', '/\\6/u', '/\\7/u', '/\\8/u', '/\\9/u'], $ERROR, PARSE_MODE_REGEX, 'no backreferences with u flag?'],
  [['/./\\u0067u', '/./u\\u0067'], $ERROR, PARSE_MODE_REGEX, 'It is a Syntax Error if IdentifierPart contains a Unicode escape sequence (11.8.5.1).'],

  [['/abc/gium', '/a|ab/u', '/((a)|(ab))((c)|(bc))/u', '/\\d{3}|[a-z]{4}/u', '/\\d{3}|[a-z]{4}/u', '/ab|cd|ef/ui', '/ab|cd|ef/u', '/(?:ab|cd)+|ef/iu', '/(?:ab|cd)+|ef/iu',
    '/11111|111/u', '/xyz|.../u', '/(.)..|abc/u', '/.+: gr(a|e)y/u', '/(Rob)|(Bob)|(Robert)|(Bobby)/u', '/()|/u', '/|()/u', '/a[a-z]{2,4}/u', '/a[a-z]{2,4}?/u',
    '/(aa|aabaac|ba|b|c)*/u', '/(z)((a+)?(b+)?(c))*/u', '/(a*)b\\1+/u', '/s$/u', '/e$/u', '/s$/mu', '/[^e]$/mug', '/es$/umg', '/^m/u', '/^m/um', '/^p[a-z]/u', '/^p[b-z]/mu', '/^[^p]/um', '/^ab/u', '/^..^e/u', '/^xxx/u',
    '/^\\^+/u', '/^\\d+/um', '/\\bp/u', '/ot\\b/u', '/\\bot/u', '/\\bso/u', '/so\\b/u', '/[^o]t\\b/u', '/[^o]t\\b/ui', '/\\bro/u', '/r\\b/u', '/\\brobot\\b/u', '/\\b\\w{5}\\b/u', '/\\bop/u', '/op\\b/u', '/e\\b/u', '/\\be/u', '/\\Bevil\\B/u', '/[f-z]e\\B/u', '/\\Bo\\B/iu', '/\\B\\w\\B/u', '/\\w\\B/u', '/\\B\\w/u', '/\\B[^z]{4}\\B/u', '/\\B\\w{4}\\B/u', '/^^^^^^^robot$$$$/u',
    '/\\B\\B\\B\\B\\B\\Bbot\\b\\b\\b\\b\\b\\b\\b/u', '/^.*?$/u', '/^.*?/u', '/^.*?(:|$)/u', '/^.*(:|$)/u', '/\\d{2,4}/u', '/b{2,3}c/u', '/b{42,93}c/u', '/b{0,93}c/u', '/bx{0,93}c/u', '/.{0,93}/u', '/\\w{3}\\d?/u',
    '/\\w{3}\\d?/u', '/b{2}c/u', '/b{8}/u', '/\\s+java\\s+/u', '/[a-z]+\\d+/u', '/[a-z]+\\d+/u', '/[a-z]+(\\d+)/u', '/d+/u', '/o+/u', '/(b+)(b+)(b+)/u', '/(b+)(b*)/u', '/b*b+/u', '/[^"]*/u', '/[^"]*/u', '/[^"]*/u',
    `/["'][^"']*["']/u`, '/(x*)(x+)/u', '/(\\d*)(\\d+)/u', '/(\\d*)\\d(\\d+)/u', '/(x+)(x*)/u', '/x*y+$/u', '/[\\d]*[\\s]*bc./u', '/bc..[\\d]*[\\s]*/u', '/[xyz]*1/u', '/java(script)?/u', '/x?y?z?/u', '/x?ay?bz?c/u',
    '/ab?c?d?x?y?z/u', '/\\??\\??\\??\\??\\??/u', '/.?.?.?.?.?.?.?/u', '/b{2,}c/u', '/b{8,}c/u', '/\\d{1,}/u', '/(123){1,}/u', '/(123){1,}x\\1/u', '/x{1,2}x{1,}/u', '/(?=(a+))/u', '/(?=(a+))a*b\\1/u',
    '/(.*?)a(?!(a+)b\\2c)\\2(.*)/u', '/Java(?!Script)([A-Z]\\w*)/u', '/Java(?!Script)([A-Z]\\w*)/u', '/(\\.(?!com|org)|\\/)/u', '/(?!a|b)|c/u',
    '/([Jj]ava([Ss]cript)?)\\sis\\s(fun\\w*)/u', '/(.{3})(.{4})/u', '/(aa)bcd\\1/u', '/(aa).+\\1/u', '/(.{2}).+\\1/u', '/(\\d{3})(\\d{3})\\1\\2/u', '/a(..(..)..)/u', '/(a(b(c)))(d(e(f)))/u',
    '/(a(b(c)))(d(e(f)))\\2\\5/u', '/a(.?)b\\1c\\1d\\1/u', '/<body.*>((.*\\n?)*?)<\\/body>/ui', '/(\\|)([\\w\\x81-\\xff ]*)(\\|)([\\/a-z][\\w:\\/\\.]*\\.[a-z]{3,4})(\\|)/uig',
    '/([\\S]+([ \\t]+[\\S]+)*)[ \\t]*=[ \\t]*[\\S]+/u', '/^(A)?(A.*)$/u', '/(a)?a/u', '/a|(b)/u', '/(a)?(a)/u', '/^([a-z]+)*[a-z]$/u', '/^(([a-z]+)*[a-z]\\.)+[a-z]{2,}$/u',
    '/^(([a-z]+)*([a-z])\\.)+[a-z]{2,}$/u', '/.*a.*/u', '/.+/u', '/[a-z]+/uig', '/[a-z]+/u', '/\\b(\\w+) \\1\\b/u', '/([xu]\\d{2}([A-H]{2})?)\\1/u', '/([xu]\\d{2}([A-H]{2})?)\\1/u',
    '/(a*)b\\1+/u', '/((((((((((A))))))))))\\1\\2\\3\\4\\5\\6\\7\\8\\9\\10/u', '/((((((((((A))))))))))\\10\\9\\8\\7\\6\\5\\4\\3\\2\\1/u', '/[]a/u', '/q[ax-zb](?=\\s+)/u',
    '/ab[ercst]de/u', '/[d-h]+/u', '/[1234567].{2}/u', '/[a-c\\d]+/u', '/ab[.]?c/u', '/a[b]c/u', '/[a-z][^1-9][a-z]/u', '/[*&$]{3}/u', '/[\\d][\\n][^\\d]/u', '/[^]a/mu', '/a[^]/u',
    '/a[^b-z]\\s+/u', '/[^\\b]+/gu', '/a[^1-9]c/u', '/a[^b]c/u', '/[^a-z]{4}/u', '/.[\\b]./u', '/c[\\b]{3}d/u', '/[^\\[\\b\\]]+/u', '/\\u0042/ui', '/1?1/miug',
  ], $REGEXU, PARSE_MODE_REGEX, 'from ecma test suite'],

  [['/\\;/u', '/\\ /u', '/\\:/u'], $ERROR, PARSE_MODE_REGEX, 'escaped non-special is a IdentityEscape without u-flag and an error with u-flag'],
];
// exhaustive set of lead/tail/non surrogate combos, with one to three chars on each side of the dash (so (4**4)*(3**2)=2304 tests with a few dupes due to the empty case)
['', 'B', 'L', 'T'].forEach(a => ['', 'B', 'L', 'T'].forEach(b => ['B', 'L', 'T'].forEach(c => ['B', 'L', 'T'].forEach(d => ['', 'B', 'L', 'T'].forEach(e => ['', 'B', 'L', 'T'].forEach(f => {
  let p = `${a}${b}${c}-${d}${e}${f}`;
  let r = `/S[${p}]/u`;
  let regexToTest = r
    .replace(/B/g, 'x')
    .replace(/L/g, '\\uD83D')
    .replace(/T/g, '\\uDCA9')
    .replace(/S/g, p);

  let t1 = '(?:B-)'; // B<=*
  let t2 = '(?:L-L)'; // L<=L L<=LT
  let t3 = '(?:L-T)'; // L<=T
  let t4 = '(?:T-LT)'; // T<=LT LT<=LT (but T>L)
  let t5 = '(?:(?:B|T|^)T-T)'; // T<=T (but LT > T)
  let test = new RegExp(`${t1}|${t2}|${t3}|${t4}|${t5}`);
  let expectedToken = (test.test(p)) ? $REGEXU : $ERROR;

  regexesu.push([regexToTest, expectedToken, PARSE_MODE_REGEX, 'generated case '+ p + ' -> ' + regexToTest]);
}))))));

module.exports = regexesu;
