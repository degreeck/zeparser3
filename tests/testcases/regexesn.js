//import {
let {
  PARSE_MODE_REGEX,
} = require('../utils');
//} from './utils';

//import ZeTokenizer, {
let {
  $ERROR,
  $REGEX,
} = require('../../src/zetokenizer'); // nodejs doesnt support import and wont for a while, it seems (https://medium.com/the-node-js-collection/an-update-on-es6-modules-in-node-js-42c958b890c)
//} from '../src/zetokenizer';

let regexesn = [
  [`/abc/`, $REGEX, PARSE_MODE_REGEX],
  [`/abc`, $ERROR, PARSE_MODE_REGEX, 'eof before closed regex', 'suffixsp'],

  // or
  [`/a|b/`, $REGEX, PARSE_MODE_REGEX],
  [[`/|a/`, `/a|/`, `/|/`, '/a||/'], $REGEX, PARSE_MODE_REGEX, 'fine OR because atoms can be empty'],
  [[`/|a`, `/a|`, `/|`, '/a||'], $ERROR, PARSE_MODE_REGEX, 'bad OR because eof/eol', 'suffixsp'],

  // simple atoms and quantifiers
  [[`/^abc/`, `/abc$/`, `/a.c/`], $REGEX, PARSE_MODE_REGEX, 'simple atoms'],
  [[`/^/`, `/ab^cd/`, `/abc^/`, `/abc^abc/`, `/$/`, `/$abc/`, `/abc$abc/`], $REGEX, PARSE_MODE_REGEX, 'simple atoms where you dont usually see them'],
  [[`/^`, `/abc$`, `/a.`], $ERROR, PARSE_MODE_REGEX, 'eol/eof after simple atoms', 'suffixsp'],
  [[`/a*/`, `/a?/`, `/a+/`], $REGEX, PARSE_MODE_REGEX, 'simple quantifiers'],
  [[`/a*b/`, `/a?b/`, `/a+b/`], $REGEX, PARSE_MODE_REGEX, 'simple quantifiers with suffix'],
  [[`/a*`, `/a?`, `/a+`], $ERROR, PARSE_MODE_REGEX, 'eol/eof after simple quantifiers', 'suffixsp'],
  [[`/a*?`, `/a?*`, `/a+?`], $ERROR, PARSE_MODE_REGEX, 'eol/eof after simple non-greedy quantifiers', 'suffixsp'],
  [[`/?/`, `/+/`, `/?a/`, `/+a/`, `/??/`, `/+?/`, `/|*/`, `/|?/`, `/|+/`], $ERROR, PARSE_MODE_REGEX, 'simple quantifiers in an invalid place'],
  [[`/*/`, `/*`, `/*a/`, `/*a`], $ERROR, PARSE_MODE_REGEX, 'actually a comment, still invalid at eof', ['suffixls','suffixcr','suffcrlf','suffixsp']],
  [[`/?`, `/+`, `/?a`, `/+a`, `/??`, `/+?`, `/|*`, `/|?`, `/|+`], $ERROR, PARSE_MODE_REGEX, 'simple quantifiers in an invalid place with eol/eof', 'suffixsp'],
  [[`/a**/`, `/a?+/`, `/a++/`], $ERROR, PARSE_MODE_REGEX, 'quantifing a quantifier'],
  [[`/a**`, `/a?*`, `/a++`], $ERROR, PARSE_MODE_REGEX, 'quantifing a quantifier at eol/eof', 'suffixsp'],
  [`/a??/`, $REGEX, PARSE_MODE_REGEX, 'quantifing a quantifier', 'suffixsp'],
  [`/a??`, $ERROR, PARSE_MODE_REGEX, 'quantifing a quantifier at eol/eof', 'suffixsp'],

  // most permutations with {d,d}
  [[`/a{0}/`, `/a{1}/`, `/a{2}/`, `/a{3}/`, `/a{4}/`, `/a{5}/`, `/a{6}/`, `/a{7}/`, `/a{8}/`, `/a{9}/`], $REGEX, PARSE_MODE_REGEX],
  [[`/a{11}/`, `/a{12}/`, `/a{23}/`, `/a{34}/`, `/a{45}/`, `/a{56}/`, `/a{67}/`, `/a{78}/`, `/a{89}/`, `/a{90}/`], $REGEX, PARSE_MODE_REGEX],
  [[`/a{0,}/`, `/a{1,}/`, `/a{2,}/`, `/a{3,}/`, `/a{4,}/`, `/a{5,}/`, `/a{6,}/`, `/a{7,}/`, `/a{8,}/`, `/a{9,}/`], $REGEX, PARSE_MODE_REGEX],
  [[`/a{11,}/`, `/a{12,}/`, `/a{23,}/`, `/a{34,}/`, `/a{45,}/`, `/a{56,}/`, `/a{67,}/`, `/a{78,}/`, `/a{89,}/`, `/a{90,}/`], $REGEX, PARSE_MODE_REGEX],
  [[`/a{0,0}/`, `/a{1,1}/`, `/a{2,2}/`, `/a{3,3}/`, `/a{4,4}/`, `/a{5,5}/`, `/a{6,6}/`, `/a{7,7}/`, `/a{8,8}/`, `/a{9,9}/`], $REGEX, PARSE_MODE_REGEX],
  [[`/a{11,0}/`, `/a{12,1}/`, `/a{23,2}/`, `/a{34,3}/`, `/a{45,4}/`, `/a{56,5}/`, `/a{67,6}/`, `/a{78,7}/`, `/a{89,8}/`, `/a{90,9}/`], $ERROR, PARSE_MODE_REGEX, 'invalid range'],
  [[`/a{0,15}/`, `/a{1,16}/`, `/a{2,27}/`, `/a{3,38}/`, `/a{4,49}/`, `/a{5,50}/`, `/a{6,61}/`, `/a{7,72}/`, `/a{8,83}/`, `/a{9,94}/`], $REGEX, PARSE_MODE_REGEX],
  [[`/a{11,15}/`, `/a{12,26}/`, `/a{23,37}/`, `/a{34,48}/`, `/a{45,59}/`, `/a{56,60}/`, `/a{67,71}/`, `/a{78,82}/`, `/a{89,93}/`, `/a{90,94}/`], $REGEX, PARSE_MODE_REGEX],
  [[`/a{,0}/`, `/a{,1}/`, `/a{,2}/`, `/a{,3}/`, `/a{,4}/`, `/a{,5}/`, `/a{,6}/`, `/a{,7}/`, `/a{,8}/`, `/a{,9}/`], $REGEX, PARSE_MODE_REGEX],
  [[`/a{,15}/`, `/a{,16}/`, `/a{,27}/`, `/a{,38}/`, `/a{,49}/`, `/a{,50}/`, `/a{,61}/`, `/a{,72}/`, `/a{,83}/`, `/a{,94}/`], $REGEX, PARSE_MODE_REGEX],
  [['/a{ 1}/', '/a{1 }/', '/a{1, 1}/', '/a{ 1, 1}/', '/a{1 ,1}/', '/a{ 1 , 1}/', '/a{1,1 }/', '/a{1, 1 }/', '/a{ 1, 1 }/', '/a{ 1 , 1 }/'], $ERROR, PARSE_MODE_REGEX, 'no spaces allowed in quantifier'],
  // edge case odd ball curly quantifier errors
  [[`/a{1,0}/`, `/a{2,1}/`, `/a{100,45}/`], $ERROR, PARSE_MODE_REGEX, 'must be {lo,hi}'],
  [[`/a{01,1}/`, `/a{1,02}/`, `/a{03,04}/`, `/a{00,00}/`], $ERROR, PARSE_MODE_REGEX, 'i think this is an error when getting the MV even when the cfg just says "digits"'],
  [[`/a{0x01,1}/`, `/a{0x15,02}/`, `/a{0b01,04}/`, `/a{00,0o01}/`], $ERROR, PARSE_MODE_REGEX, 'alternative number literals not allowed'],

  // flags
  [['/foo/g', '/foo/i', '/foo/m', '/foo/y'], $REGEX, PARSE_MODE_REGEX],
  [['/foo/gg', '/foo/ii', '/foo/mm', '/foo/yy'], $ERROR, PARSE_MODE_REGEX],
  [['/foo/ig', '/foo/mi', '/foo/gy'], $REGEX, PARSE_MODE_REGEX],
  [['/foo/gmi', '/foo/igy'], $REGEX, PARSE_MODE_REGEX],
  [['/foo/gmmi', '/foo/ggymi', '/foo/myiy', '/foo/igyi'], $ERROR, PARSE_MODE_REGEX],

  // escapes (only \f \n \r \t \v should work)
  [['/\\d/', '/\\D/', '/\\f/', '/\\n/', '/\\r/', '/\\s/', '/\\S/', '/\\t/', '/\\v/', '/\\w/', '/\\W/'], $REGEX, PARSE_MODE_REGEX, 'only escaping a single letter'],
  [['/abc\\d/', '/abc\\D/', '/abc\\f/', '/abc\\n/', '/abc\\r/', '/abc\\s/', '/abc\\S/', '/abc\\t/', '/abc\\v/', '/abc\\w/', '/abc\\W/'], $REGEX, PARSE_MODE_REGEX, 'escaping a prefixed single letter'],
  [['/\\fabcd/', '/\\dabcd/', '/\\Dabcd/', '/\\nabcd/', '/\\rabcd/', '/\\sabcd/', '/\\Sabcd/', '/\\tabcd/', '/\\vabcd/', '/\\wabcd/', '/\\Wabcd/'], $REGEX, PARSE_MODE_REGEX, 'escaping a suffixed single letter'],
  [['/abc\\fdeff/', '/abc\\ddeff/', '/abc\\Ddeff/', '/abc\\ndeff/', '/abc\\rdeff/', '/abc\\sdeff/', '/abc\\Sdeff/', '/abc\\tdeff/', '/abc\\vdeff/', '/abc\\wdeff/', '/abc\\Wdeff/'], $REGEX, PARSE_MODE_REGEX, 'escaping a single letter in the middle'],
  // the other char escapes are errors...
  [['/\\a/', '/\\e/', '/\\g/', '/\\h/', '/\\i/', '/\\j/', '/\\k/', '/\\l/', '/\\m/', '/\\o/', '/\\p/', '/\\q/', '/\\u/', '/\\x/', '/\\y/', '/\\z/'], $ERROR, PARSE_MODE_REGEX, 'only escaping a single lc letter'],
  [['/\\A/', '/\\E/', '/\\F/', '/\\G/', '/\\H/', '/\\I/', '/\\J/', '/\\K/', '/\\L/', '/\\M/', '/\\N/', '/\\O/', '/\\P/', '/\\Q/', '/\\R/', '/\\T/', '/\\U/', '/\\V/', '/\\X/', '/\\Y/', '/\\Z/'], $ERROR, PARSE_MODE_REGEX, 'only escaping a single uc letter'],
  [['/abc\\a/', '/abc\\e/', '/abc\\g/', '/abc\\h/', '/abc\\i/', '/abc\\j/', '/abc\\k/', '/abc\\l/', '/abc\\m/', '/abc\\o/', '/abc\\p/', '/abc\\q/', '/abc\\u/', '/abc\\x/', '/abc\\y/', '/abc\\z/'], $ERROR, PARSE_MODE_REGEX, 'escaping a prefixed single lc letter'],
  [['/abc\\A/', '/abc\\E/', '/abc\\F/', '/abc\\G/', '/abc\\H/', '/abc\\I/', '/abc\\J/', '/abc\\K/', '/abc\\L/', '/abc\\M/', '/abc\\N/', '/abc\\O/', '/abc\\P/', '/abc\\Q/', '/abc\\R/', '/abc\\T/', '/abc\\U/', '/abc\\V/', '/abc\\X/', '/abc\\Y/', '/abc\\Z/'], $ERROR, PARSE_MODE_REGEX, 'escaping a prefixed single uc letter'],
  [['/\\aabcd/', '/\\eabcd/', '/\\gabcd/', '/\\habcd/', '/\\iabcd/', '/\\jabcd/', '/\\kabcd/', '/\\labcd/', '/\\mabcd/', '/\\oabcd/', '/\\pabcd/', '/\\qabcd/', '/\\xabcd/', '/\\yabcd/', '/\\zabcd/'], $ERROR, PARSE_MODE_REGEX, 'escaping a suffixed single lc letter'],
  [['/\\Aabcd/', '/\\Cabcd/', '/\\Eabcd/', '/\\Fabcd/', '/\\Gabcd/', '/\\Habcd/', '/\\Iabcd/', '/\\Jabcd/', '/\\Kabcd/', '/\\Labcd/', '/\\Mabcd/', '/\\Nabcd/', '/\\Oabcd/', '/\\Pabcd/', '/\\Qabcd/', '/\\Rabcd/', '/\\Tabcd/', '/\\Uabcd/', '/\\Vabcd/', '/\\Xabcd/', '/\\Yabcd/', '/\\Zabcd/'], $ERROR, PARSE_MODE_REGEX, 'escaping a suffixed single uc letter'],
  [['/abc\\adeff/', '/abc\\gdeff/', '/abc\\hdeff/', '/abc\\ideff/', '/abc\\jdeff/', '/abc\\kdeff/', '/abc\\ldeff/', '/abc\\mdeff/', '/abc\\odeff/', '/abc\\pdeff/', '/abc\\qdeff/', '/abc\\xdeff/', '/abc\\ydeff/', '/abc\\zdeff/'], $ERROR, PARSE_MODE_REGEX, 'escaping a single lc letter in the middle'],
  [['/abc\\Adeff/', '/abc\\Cdeff/', '/abc\\Edeff/', '/abc\\Fdeff/', '/abc\\Gdeff/', '/abc\\Hdeff/', '/abc\\Ideff/', '/abc\\Jdeff/', '/abc\\Kdeff/', '/abc\\Ldeff/', '/abc\\Mdeff/', '/abc\\Ndeff/', '/abc\\Odeff/', '/abc\\Pdeff/', '/abc\\Qdeff/', '/abc\\Rdeff/', '/abc\\Tdeff/', '/abc\\Udeff/', '/abc\\Vdeff/', '/abc\\Xdeff/', '/abc\\Ydeff/', '/abc\\Zdeff/'], $ERROR, PARSE_MODE_REGEX, 'escaping a single uc letter in the middle'],
  [['/\\_/', '/abc\\_/', '/\\_abcd/', '/abc\\_abcd/'], $ERROR, PARSE_MODE_REGEX, '_ is not an escapable char'],
  [['/\\$/', '/abc\\$/', '/\\$abcd/', '/abc\\$abcd/'], $REGEX, PARSE_MODE_REGEX, '$ is a syntax char we can escape'],
  // escaping "syntax characters"
  [[`/\\^/`, `/\\$/`, `/\\\\/`, `/\\./`, `/\\*/`, `/\\+/`, `/\\?/`, `/\\(/`, `/\\)/`, `/\\[/`, `/\\]/`, `/\\{/`, `/\\}/`, `/\\|/`], $REGEX, PARSE_MODE_REGEX, 'syntax char escapes'],
  [[`/abc\\^/`, `/abc\\$/`, `/abc\\\\/`, `/abc\\./`, `/abc\\*/`, `/abc\\+/`, `/abc\\?/`, `/abc\\(/`, `/abc\\)/`, `/abc\\[/`, `/abc\\]/`, `/abc\\{/`, `/abc\\}/`, `/abc\\|/`], $REGEX, PARSE_MODE_REGEX, 'syntax char escapes with prefix'],
  [[`/\\^def/`, `/\\$def/`, `/\\\\def/`, `/\\.def/`, `/\\*def/`, `/\\+def/`, `/\\?def/`, `/\\(def/`, `/\\)def/`, `/\\[def/`, `/\\]def/`, `/\\{def/`, `/\\}def/`, `/\\|def/`], $REGEX, PARSE_MODE_REGEX, 'syntax char escapes with suffix'],
  [[`/\\^`, `/\\$`, `/\\\\`, `/\\.`, `/\\*`, `/\\+`, `/\\?`, `/\\(`, `/\\)`, `/\\[`, `/\\]`, `/\\{`, `/\\}`, `/\\|`], $ERROR, PARSE_MODE_REGEX, 'syntax char escapes with early eol/eof', 'suffixsp'],
  [[`/\\'/`, `/\\"/`, `/\\\`/`], $REGEX, PARSE_MODE_REGEX, 'escaping a quote should be okay without u-flag'],
  [['/^/', '/$/', '/./'], $REGEX, PARSE_MODE_REGEX, 'off to a good start'],
  [['/+/', '/?/', '/)/', '/]/', '/{/', '/}/'], $ERROR, PARSE_MODE_REGEX, 'off to a bad start'],
  [['/a|*/', '/a|+/', '/a|?/', '/a|)/', '/a|]/', '/a|{/', '/a|}/'], $ERROR, PARSE_MODE_REGEX, 'and you started so well'],
  [['/a(*)/', '/a(+)/', '/a(?)/', '/a|(])/', '/a|({)/', '/a|(})/'], $ERROR, PARSE_MODE_REGEX, 'wrapped syntax char start'],
  [['/a|(|)/', '/a|(|)/'], $REGEX, PARSE_MODE_REGEX, 'group with weird or is okay'],
  [['/\\/', '/a|\\/'], $ERROR, PARSE_MODE_REGEX, '(eol/eof case)', 'suffixsp'],
  // \c<x>
  [['/\\ca/', '/\\cb/', '/\\cd/', '/\\ce/', '/\\cf/', '/\\cg/', '/\\ch/', '/\\ci/', '/\\cj/', '/\\ck/', '/\\cl/', '/\\cm/', '/\\cn/', '/\\co/', '/\\cp/', '/\\cq/', '/\\cr/', '/\\cs/', '/\\ct/', '/\\cu/', '/\\cv/', '/\\cw/', '/\\cx/', '/\\cy/', '/\\cz/'], $REGEX, PARSE_MODE_REGEX, 'control character lc'],
  [['/\\cA/', '/\\cB/', '/\\cD/', '/\\cE/', '/\\cF/', '/\\cG/', '/\\cH/', '/\\cI/', '/\\cJ/', '/\\cK/', '/\\cL/', '/\\cM/', '/\\cN/', '/\\cO/', '/\\cP/', '/\\cQ/', '/\\cR/', '/\\cS/', '/\\cT/', '/\\cU/', '/\\cV/', '/\\cW/', '/\\cX/', '/\\cY/', '/\\cZ/'], $REGEX, PARSE_MODE_REGEX, 'control character uc'],
  [['/\\ca', '/\\cb', '/\\cc', '/\\cd', '/\\ce', '/\\cf', '/\\cg', '/\\ch', '/\\ci', '/\\cj', '/\\ck', '/\\cl', '/\\cm', '/\\cn', '/\\co', '/\\cp', '/\\cq', '/\\cr', '/\\cs', '/\\ct', '/\\cu', '/\\cv', '/\\cw', '/\\cx', '/\\cy', '/\\cz'], $ERROR, PARSE_MODE_REGEX, 'control character lc eol/eof', 'suffixsp'],
  [['/\\cA', '/\\cB', '/\\cC', '/\\cD', '/\\cE', '/\\cF', '/\\cG', '/\\cH', '/\\cI', '/\\cJ', '/\\cK', '/\\cL', '/\\cM', '/\\cN', '/\\cO', '/\\cP', '/\\cQ', '/\\cR', '/\\cS', '/\\cT', '/\\cU', '/\\cV', '/\\cW', '/\\cX', '/\\cY', '/\\cZ'], $ERROR, PARSE_MODE_REGEX, 'control character uc eol/eof', 'suffixsp'],
  // same escapes but early eol/eof/bad
  [['/\\a', '/\\b', '/\\d', '/\\e', '/\\f', '/\\g', '/\\h', '/\\i', '/\\j', '/\\k', '/\\l', '/\\m', '/\\n', '/\\o', '/\\p', '/\\q', '/\\r', '/\\s', '/\\t', '/\\u', '/\\v', '/\\w', '/\\x', '/\\y', '/\\z'], $ERROR, PARSE_MODE_REGEX, 'only escaping a single lc letter', 'suffixsp'],
  [['/\\A', '/\\B', '/\\D', '/\\E', '/\\F', '/\\G', '/\\H', '/\\I', '/\\J', '/\\K', '/\\L', '/\\M', '/\\N', '/\\O', '/\\P', '/\\Q', '/\\R', '/\\S', '/\\T', '/\\U', '/\\V', '/\\W', '/\\X', '/\\Y', '/\\Z'], $ERROR, PARSE_MODE_REGEX, 'only escaping a single uc letter', 'suffixsp'],
  [['/abc\\a', '/abc\\b', '/abc\\d', '/abc\\e', '/abc\\f', '/abc\\g', '/abc\\h', '/abc\\i', '/abc\\j', '/abc\\k', '/abc\\l', '/abc\\m', '/abc\\n', '/abc\\o', '/abc\\p', '/abc\\q', '/abc\\r', '/abc\\s', '/abc\\t', '/abc\\u', '/abc\\v', '/abc\\w', '/abc\\x', '/abc\\y', '/abc\\z'], $ERROR, PARSE_MODE_REGEX, 'escaping a prefixed single lc letter', 'suffixsp'],
  [['/abc\\A', '/abc\\B', '/abc\\D', '/abc\\E', '/abc\\F', '/abc\\G', '/abc\\H', '/abc\\I', '/abc\\J', '/abc\\K', '/abc\\L', '/abc\\M', '/abc\\N', '/abc\\O', '/abc\\P', '/abc\\Q', '/abc\\R', '/abc\\S', '/abc\\T', '/abc\\U', '/abc\\V', '/abc\\W', '/abc\\X', '/abc\\Y', '/abc\\Z'], $ERROR, PARSE_MODE_REGEX, 'escaping a prefixed single uc letter', 'suffixsp'],
  [['/\\aabcd', '/\\babcd', '/\\cabcd', '/\\dabcd', '/\\eabcd', '/\\fabcd', '/\\gabcd', '/\\habcd', '/\\iabcd', '/\\jabcd', '/\\kabcd', '/\\labcd', '/\\mabcd', '/\\nabcd', '/\\oabcd', '/\\pabcd', '/\\qabcd', '/\\rabcd', '/\\sabcd', '/\\tabcd', '/\\uabcd', '/\\vabcd', '/\\wabcd', '/\\xabcd', '/\\yabcd', '/\\zabcd'], $ERROR, PARSE_MODE_REGEX, 'escaping a suffixed single lc letter', 'suffixsp'],
  [['/\\Aabcd', '/\\Babcd', '/\\Cabcd', '/\\Dabcd', '/\\Eabcd', '/\\Fabcd', '/\\Gabcd', '/\\Habcd', '/\\Iabcd', '/\\Jabcd', '/\\Kabcd', '/\\Labcd', '/\\Mabcd', '/\\Nabcd', '/\\Oabcd', '/\\Pabcd', '/\\Qabcd', '/\\Rabcd', '/\\Sabcd', '/\\Tabcd', '/\\Uabcd', '/\\Vabcd', '/\\Wabcd', '/\\Xabcd', '/\\Yabcd', '/\\Zabcd'], $ERROR, PARSE_MODE_REGEX, 'escaping a suffixed single uc letter', 'suffixsp'],
  [['/abc\\adeff', '/abc\\bdeff', '/abc\\cdeff', '/abc\\ddeff', '/abc\\edeff', '/abc\\fdeff', '/abc\\gdeff', '/abc\\hdeff', '/abc\\ideff', '/abc\\jdeff', '/abc\\kdeff', '/abc\\ldeff', '/abc\\mdeff', '/abc\\ndeff', '/abc\\odeff', '/abc\\pdeff', '/abc\\qdeff', '/abc\\rdeff', '/abc\\sdeff', '/abc\\tdeff', '/abc\\udeff', '/abc\\vdeff', '/abc\\wdeff', '/abc\\xdeff', '/abc\\ydeff', '/abc\\zdeff'], $ERROR, PARSE_MODE_REGEX, 'escaping a single lc letter in the middle', 'suffixsp'],
  [['/abc\\Adeff', '/abc\\Bdeff', '/abc\\Cdeff', '/abc\\Ddeff', '/abc\\Edeff', '/abc\\Fdeff', '/abc\\Gdeff', '/abc\\Hdeff', '/abc\\Ideff', '/abc\\Jdeff', '/abc\\Kdeff', '/abc\\Ldeff', '/abc\\Mdeff', '/abc\\Ndeff', '/abc\\Odeff', '/abc\\Pdeff', '/abc\\Qdeff', '/abc\\Rdeff', '/abc\\Sdeff', '/abc\\Tdeff', '/abc\\Udeff', '/abc\\Vdeff', '/abc\\Wdeff', '/abc\\Xdeff', '/abc\\Ydeff', '/abc\\Zdeff'], $ERROR, PARSE_MODE_REGEX, 'escaping a single uc letter in the middle', 'suffixsp'],
  [['/\\$', '/abc\\$', '/\\$abcd', '/abc\\$abcd', '/\\_', '/abc\\_', '/\\_abcd', '/abc\\_abcd'], $ERROR, PARSE_MODE_REGEX, '$ and _', 'suffixsp'],
  // hex escapes
  [['/\\x01/', '/\\x12/', '/\\x23/', '/\\x34/', '/\\x45/', '/\\x56/', '/\\x67/', '/\\x78/', '/\\x89/', '/\\x90/'], $REGEX, PARSE_MODE_REGEX, 'valid hex escapes'],
  [['/\\x/', '/\\x0/', '/\\x1/', '/\\x2/', '/\\x3/', '/\\x4/', '/\\x5/', '/\\x6/', '/\\x7/', '/\\x8/', '/\\x9/'], $ERROR, PARSE_MODE_REGEX, 'invalid hex escape with one char'],
  [['/\\x', '/\\x0', '/\\x1', '/\\x2', '/\\x3', '/\\x4', '/\\x5', '/\\x6', '/\\x7', '/\\x8', '/\\x9'], $ERROR, PARSE_MODE_REGEX, 'invalid hex escape with one charat eol/eof', 'suffixsp'],
  [['/\\x01', '/\\x12', '/\\x23', '/\\x34', '/\\x45', '/\\x56', '/\\x67', '/\\x78', '/\\x89', '/\\x90'], $ERROR, PARSE_MODE_REGEX, 'hex escape at eof/eol', 'suffixsp'],
  // digit escape / backreferences
  [['/\\0/', '/a\\0/', '/\\0b/', '/a\\0b/', '/(a)\\0/', '/\\0(b)/', '/(\\0)/', '/(0\\0)/', '/(1\\0)/'], $REGEX, PARSE_MODE_REGEX, 'escaped zero is a NUL and not a back reference'],
  [['/\\01/', '/a\\02/', '/\\03b/', '/a\\04b/', '/(a)\\05/', '/\\06(b)/', '/(\\07)/', '/\\08/', '/\\09/', '/\\00/'], $ERROR, PARSE_MODE_REGEX, 'escaped zero can not be followed by another digit'],
  [['/\\0', '/a\\0', '/\\0b', '/a\\0b', '/(a)\\0', '/\\0(b)', '/(\\0)'], $ERROR, PARSE_MODE_REGEX, 'escaped zero at eol/eof', 'suffixsp'],
  [['/\\01', '/a\\02', '/\\03b', '/a\\04b', '/(a)\\05', '/\\06(b)', '/(\\07)', '/\\08', '/\\09', '/\\00'], $ERROR, PARSE_MODE_REGEX, 'escaped zero at eol/eof', 'suffixsp'],
  [['/\\1(a)/', '/(a)\\1/', '/(\\1)/', '/\\1x(a)/', '/(a)x\\1/', '/(a\\1b)/', '/0\\1(a)/', '/4\\1(a)/', '/(a)|\\1/', '/\\1|(a)/', '/(\\1|a)/', '/(a|\\1)/'], $REGEX, PARSE_MODE_REGEX, 'backreference anywhere with 1 capturing group'],
  [['/\\1(a)', '/(a)\\1', '/(\\1)', '/\\1x(a)', '/(a)x\\1', '/(a\\1b)', '/0\\1(a)', '/4\\1(a)', '/(a)|\\1', '/\\1|(a)', '/(\\1|a)', '/(a|\\1)'], $ERROR, PARSE_MODE_REGEX, 'backreference anywhere with eol/eof', 'suffixsp'],
  [['/\\2(a)/', '/(a)\\3/', '/(\\4)/', '/\\5x(a)/', '/(a)x\\6/', '/(a\\7b)/', '/0\\8(a)/', '/4\\9(a)/', '/(a)|\\10/', '/\\11|(a)/', '/(\\12|a)/', '/(a|\\13)/'], $ERROR, PARSE_MODE_REGEX, 'illegal backreference indexes'],
  [[
    '/\\0/', '/(a)\\0/',
    '/(a)\\1/', '/((a))\\1/',
    '/((a))\\2/', '/(((a)))\\2/',
    '/(((a)))\\3/', '/((((a))))\\3/',
    '/((((a))))\\4/', '/(((((a)))))\\4/',
    '/(((((a)))))\\5/', '/((((((a))))))\\5/',
    '/((((((a))))))\\6/', '/(((((((a)))))))\\6/',
    '/(((((((a)))))))\\7/', '/((((((((a))))))))\\7/',
    '/((((((((a))))))))\\8/', '/(((((((((a)))))))))\\8/',
    '/(((((((((a)))))))))\\9/', '/((((((((((a))))))))))\\9/',
    '/((((((((((a))))))))))\\10/', '/(((((((((((a)))))))))))\\10/',
    '/(((((((((((a)))))))))))\\11/', '/((((((((((((a))))))))))))\\11/',
    '/((((((((((((a))))))))))))\\12/', '/(((((((((((((a)))))))))))))\\12/',
    '/(((((((((((((a)))))))))))))\\13/', '/((((((((((((((a))))))))))))))\\13/',
    '/((((((((((((((a))))))))))))))\\14/', '/(((((((((((((((a)))))))))))))))\\14/',
    '/(((((((((((((((a)))))))))))))))\\15/', '/((((((((((((((((a))))))))))))))))\\15/',
    '/((((((((((((((((a))))))))))))))))\\16/', '/(((((((((((((((((a)))))))))))))))))\\16/',
    '/(((((((((((((((((a)))))))))))))))))\\17/', '/((((((((((((((((((a))))))))))))))))))\\17/',
    '/((((((((((((((((((a))))))))))))))))))\\18/', '/(((((((((((((((((((a)))))))))))))))))))\\18/',
    '/(((((((((((((((((((a)))))))))))))))))))\\19/', '/((((((((((((((((((((a))))))))))))))))))))\\19/',
    '/((((((((((((((((((((a))))))))))))))))))))\\20/', '/(((((((((((((((((((((a)))))))))))))))))))))\\20/',
  ], $REGEX, PARSE_MODE_REGEX, '0 to 20 matching groups with as many or as many plus 1 groups (tests all digits for escaping one or two digits)'],
  [[
    '/a\\1/',
    '/(a)\\2/',
    '/((a))\\3/',
    '/(((a)))\\4/',
    '/((((a))))\\5/',
    '/(((((a)))))\\6/',
    '/((((((a))))))\\7/',
    '/(((((((a)))))))\\8/',
    '/((((((((a))))))))\\9/',
    '/(((((((((a)))))))))\\10/',
    '/((((((((((a))))))))))\\11/',
    '/(((((((((((a)))))))))))\\12/',
    '/((((((((((((a))))))))))))\\13/',
    '/(((((((((((((a)))))))))))))\\14/',
    '/((((((((((((((a))))))))))))))\\15/',
    '/(((((((((((((((a)))))))))))))))\\16/',
    '/((((((((((((((((a))))))))))))))))\\17/',
    '/(((((((((((((((((a)))))))))))))))))\\18/',
    '/((((((((((((((((((a))))))))))))))))))\\19/',
    '/(((((((((((((((((((a)))))))))))))))))))\\20/',
    '/((((((((((((((((((((a))))))))))))))))))))\\21/',
  ], $ERROR, PARSE_MODE_REGEX, '1 to 21 matching groups with one too few groups'],
  // unicode quad escapes (more relevant for u-mode but still good to have in both). see also the class escapes
  [['/\\u1234/', '/x\\u0567/', '/\\uf89ay/', '/x\\ubcdey/'], $REGEX, PARSE_MODE_REGEX, 'non surrogate'],
  [['/\\u', '/\\u0', '/\\uf8', '/\\ubcd', '/\\ubcde'], $ERROR, PARSE_MODE_REGEX, 'incomplete unicode quad escape eol/eof', 'suffixsp'],
  [['/x\\u', '/x\\u0', '/x\\uf8', '/x\\ubcd', '/x\\ubcde'], $ERROR, PARSE_MODE_REGEX, 'incomplete unicode quad escape eol/eof', 'suffixsp'],
  //// surrogate stuff
  [['/\\ud800/', '/x\\ud810/', '/\\ud900y/', '/x\\udabcy/', '/x\\udabcy/g', '/x\\udabcy/m', '/x\\udabcy/iy'], $REGEX, PARSE_MODE_REGEX, 'lead surrogate'],
  [['/\\ud800\\ud800/', '/x\\ud810\\ud810/', '/\\ud900\\ud900y/', '/x\\udabc\\udabcy/'], $REGEX, PARSE_MODE_REGEX, 'lead + lead surrogate'],
  [['/\\udc00/', '/x\\udc10/', '/\\udd00y/', '/x\\udebcy/', '/x\\udebcy/g', '/x\\udebcy/im', '/x\\udebcy/y'], $REGEX, PARSE_MODE_REGEX, 'trail surrogate'],
  [['/\\udc00\\udc00/', '/x\\udc10\\udc10/', '/\\udd00\\udd00y/', '/x\\udebc\\udebcy/', '/x\\udebc\\udebcy/i'], $REGEX, PARSE_MODE_REGEX, 'trail + trail surrogate'],
  [['/\\ud800\\udc00/', '/x\\ud810\\udc10/', '/\\ud900\\udd00y/', '/x\\udabc\\udebcy/', '/x\\udabc\\udebcy/g'], $REGEX, PARSE_MODE_REGEX, 'lead + trail surrogate'],
  [['/\\u1234\\ud800/', '/x\\u0567\\ud810/', '/\\uf89a\\ud900y/', '/x\\ubcde\\udabcy/', '/x\\ubcde\\udabcy/m'], $REGEX, PARSE_MODE_REGEX, 'non + lead surrogate'],
  [['/\\u1234\\udc00/', '/x\\u0567\\udc10/', '/\\uf89a\\udd00y/', '/x\\ubcde\\udebcy/', '/x\\ubcde\\udebcy/y'], $REGEX, PARSE_MODE_REGEX, 'non + trail pair'],
  [['/\\u1234\\u1234\\udc00/', '/x\\u0567\\u0567\\udc10/', '/\\uf89a\\uf89a\\udd00y/', '/x\\ubcde\\ubcde\\udebcy/'], $REGEX, PARSE_MODE_REGEX, 'non + non + trail pair'],
  [['/\\u1234\\udc00\\udc00/', '/x\\u0567\\udc10\\udc10/', '/\\uf89a\\udd00\\udd00y/', '/x\\ubcde\\udebc\\udebcy/'], $REGEX, PARSE_MODE_REGEX, 'non + trail + trail pair'],
  [['/\\ud800\\ud800\\udc00/', '/x\\ud810\\ud810\\udc10/', '/\\ud900\\ud900\\udd00y/', '/x\\udabc\\udabc\\udebcy/'], $REGEX, PARSE_MODE_REGEX, 'lead + lead + trail surrogate'],
  [['/\\ud800\\udc00\\udc00/', '/x\\ud810\\udc10\\udc10/', '/\\ud900\\udd00\\udd00y/', '/x\\udabc\\udebc\\udebcy/'], $REGEX, PARSE_MODE_REGEX, 'lead + trail + trail surrogate'],
  [['/\\ud800\\udc00\\ud800/', '/x\\ud810\\udc10\\ud810/', '/\\ud900\\udd00\\ud900y/', '/x\\udabc\\udebc\\udabcy/'], $REGEX, PARSE_MODE_REGEX, 'lead + trail + lead surrogate'],
  //// unicode long escapes (all illegal without u flag)
  [[`/\\u{0123}/`, `/\\u{4567}/`, `/\\u{89abc}/`, `/\\u{defAB}/`, `/\\u{CDEF}/`], $ERROR, PARSE_MODE_REGEX],
  [`/prefix \\u{012345}/`, $ERROR, PARSE_MODE_REGEX],
  [`/\\u{012345} postfix/`, $ERROR, PARSE_MODE_REGEX],
  [`/\\u{012345}\\u{6789a}/`, $ERROR, PARSE_MODE_REGEX],
  [[`/\\u{}/`, `/\\u{fail}/`, `/\\u{afail}/`, `/\\u{0fail}/`, `/\\u{xxxx}/`], $ERROR, PARSE_MODE_REGEX, 'long unicode escape bad contents'],
  [[`/\\u{/`, `/\\u{a/`, `/\\u{af/`, `/\\u{012/`, `/\\u{01234/`, `/\\u{012345/`], $ERROR, PARSE_MODE_REGEX, 'unclosed long unicode escapes'],
  [[`/\\u{1}/`, `/\\u{12}/`, `/\\u{123}/`, `/\\u{1234}/`, `/\\u{12345}/`, `/\\u{103456}/`], $ERROR, PARSE_MODE_REGEX, 'incomplete long unicode escapes'],
  [[`/\\u{`, `/\\u{a`, `/\\u{af`, `/\\u{123`, `/\\u{1234`, `/\\u{12345`, `/\\u{103456`], $ERROR, PARSE_MODE_REGEX, 'incomplete long unicode escapes in unclosed string', 'suffixsp'],
  [`/\\u{10ffff}/`, $ERROR, PARSE_MODE_REGEX, 'It is a Syntax Error if the MV of HexDigits > 1114111.'],
  [`/\\u{110000}/`, $ERROR, PARSE_MODE_REGEX, 'It is a Syntax Error if the MV of HexDigits > 1114111.'],
  [`/\\u{0000000000000000000010ffff}/`, $ERROR, PARSE_MODE_REGEX, 'must take care that the hex may still have any number of leading zeroes'],
  [`/\\u{00000000000000000000110000}/`, $ERROR, PARSE_MODE_REGEX, 'must take care that the hex may still have any number of leading zeroes'],
  // character classes simple
  [[`/[]/`, `/a[]/`, `/[]b/`, `/a[]b/`], $REGEX, PARSE_MODE_REGEX, 'empty class is explicitly allowed'],
  [[`/[^]/`, `/a[^]/`, `/[^]b/`, `/a[^]b/`], $REGEX, PARSE_MODE_REGEX, 'empty inverted class is explicitly allowed'],
  [[`/[a]/`, `/[b]/`, `/[c]/`, `/[d]/`, `/[e]/`, `/[f]/`, `/[g]/`, `/[h]/`, `/[i]/`, `/[j]/`, `/[k]/`, `/[l]/`, `/[m]/`, `/[n]/`, `/[o]/`, `/[p]/`, `/[q]/`, `/[r]/`, `/[s]/`, `/[t]/`, `/[u]/`, `/[v]/`, `/[w]/`, `/[x]/`, `/[y]/`, `/[z]/`], $REGEX, PARSE_MODE_REGEX, 'simple char class with one char'],
  [[`/[A]/`, `/[B]/`, `/[C]/`, `/[D]/`, `/[E]/`, `/[F]/`, `/[G]/`, `/[H]/`, `/[I]/`, `/[J]/`, `/[K]/`, `/[L]/`, `/[M]/`, `/[N]/`, `/[O]/`, `/[P]/`, `/[Q]/`, `/[R]/`, `/[S]/`, `/[T]/`, `/[U]/`, `/[V]/`, `/[W]/`, `/[X]/`, `/[Y]/`, `/[Z]/`], $REGEX, PARSE_MODE_REGEX, 'simple char class with one char'],
  [[`/[rD]/`, `/[Kq]/`, `/[$%]/`], $REGEX, PARSE_MODE_REGEX, 'simple char class with two chars'],
  [`/[-]/`, $REGEX, PARSE_MODE_REGEX, 'the class with just a dash should be legal'],
  [[`/[-b]/`, `/[-bcd]/`], $REGEX, PARSE_MODE_REGEX, 'leading dash'],
  [[`/[a-]/`, `/[abc-]/`], $REGEX, PARSE_MODE_REGEX, 'trailing dash'],
  [['/[^-J]/g', '/[^-fdsasgJ]/g'], $REGEX, PARSE_MODE_REGEX, 'leading dash with invert'],
  [['/[^J-]/g', '/[^Jdsads-]/g'], $REGEX, PARSE_MODE_REGEX, 'trailing dash with invert'],
  ['/[^--]/g', $REGEX, PARSE_MODE_REGEX, 'double dash with invert'],
  ['/[^---]/g', $REGEX, PARSE_MODE_REGEX, 'triple dash with invert'],
  // character class escapes (pretty much a repeat of the previous wrapped in [] ...)
  [[`/[\\b]/`, `/[a\\bc]/`, `/[\\bc]/`, `/[a\\bb]/`], $REGEX, PARSE_MODE_REGEX, 'class escape b'],
  [[`/[\\-]/`, `/[a\\-c]/`, `/[\\-c]/`, `/[a\\-b]/`], $ERROR, PARSE_MODE_REGEX, 'class escape dash with valid ranges is still illegal without u flag'],
  [`/[b\\-a]/`, $ERROR, PARSE_MODE_REGEX, 'class escape dash with invalid ranges is illegal'],
  // back references in char class
  [['/[\\0]/', '/[a\\0]/', '/[\\0b]/', '/[a\\0b]/', '/[0\\0b]/', '/[1\\0b]/'], $REGEX, PARSE_MODE_REGEX, 'NUL escape is ok in char class'],
  [['/[\\1]/', '/[\\2]/', '/[\\3]/', '/[\\4]/', '/[\\5]/', '/[\\6]/', '/[\\7]/', '/[\\8]/', '/[\\9]/'], $ERROR, PARSE_MODE_REGEX, 'non-zero digit escapes are illegal in char class'],
  [['/[\\00]/', '/[\\01]/', '/[\\02]/', '/[\\03]/', '/[\\04]/', '/[\\05]/', '/[\\06]/', '/[\\07]/', '/[\\08]/', '/[\\09]/'], $ERROR, PARSE_MODE_REGEX, 'slash 0 can never be followed by another digit'],
  [['/[\\90]/', '/[\\12]/', '/[\\23]/', '/[\\34]/', '/[\\45]/', '/[\\56]/', '/[\\67]/', '/[\\78]/', '/[\\89]/', '/[\\91]/'], $ERROR, PARSE_MODE_REGEX, 'non-zero digit escapes are illegal in char class'],
  [['/[\\0', '/[\\1', '/[\\2', '/[\\3', '/[\\4', '/[\\5', '/[\\6', '/[\\7', '/[\\8', '/[\\9'], $ERROR, PARSE_MODE_REGEX, 'digit escapes at eol/eof', 'suffixsp'],
  // char escapes in char class
  [['/[\\d]/', '/[\\D]/', '/[\\f]/', '/[\\n]/', '/[\\r]/', '/[\\s]/', '/[\\S]/', '/[\\t]/', '/[\\v]/', '/[\\w]/', '/[\\W]/'], $REGEX, PARSE_MODE_REGEX, 'only escaping a single letter'],
  [['/[abc\\d]/', '/[abc\\D]/', '/[abc\\f]/', '/[abc\\n]/', '/[abc\\r]/', '/[abc\\s]/', '/[abc\\S]/', '/[abc\\t]/', '/[abc\\v]/', '/[abc\\w]/', '/[abc\\W]/'], $REGEX, PARSE_MODE_REGEX, 'escaping a prefixed single letter'],
  [['/[\\fabcd]/', '/[\\dabcd]/', '/[\\Dabcd]/', '/[\\nabcd]/', '/[\\rabcd]/', '/[\\sabcd]/', '/[\\Sabcd]/', '/[\\tabcd]/', '/[\\vabcd]/', '/[\\wabcd]/', '/[\\Wabcd]/'], $REGEX, PARSE_MODE_REGEX, 'escaping a suffixed single letter'],
  [['/[abc\\fdeff]/', '/[abc\\ddeff]/', '/[abc\\Ddeff]/', '/[abc\\ndeff]/', '/[abc\\rdeff]/', '/[abc\\sdeff]/', '/[abc\\Sdeff]/', '/[abc\\tdeff]/', '/[abc\\vdeff]/', '/[abc\\wdeff]/', '/[abc\\Wdeff]/'], $REGEX, PARSE_MODE_REGEX, 'escaping a single letter in the middle'],
  [['/[\\a]/', '/[\\e]/', '/[\\g]/', '/[\\h]/', '/[\\i]/', '/[\\j]/', '/[\\k]/', '/[\\l]/', '/[\\m]/', '/[\\o]/', '/[\\p]/', '/[\\q]/', '/[\\u]/', '/[\\x]/', '/[\\y]/', '/[\\z]/'], $ERROR, PARSE_MODE_REGEX, 'only escaping a single lc letter'],
  [['/[\\A]/', '/[\\E]/', '/[\\F]/', '/[\\G]/', '/[\\H]/', '/[\\I]/', '/[\\J]/', '/[\\K]/', '/[\\L]/', '/[\\M]/', '/[\\N]/', '/[\\O]/', '/[\\P]/', '/[\\Q]/', '/[\\R]/', '/[\\T]/', '/[\\U]/', '/[\\V]/', '/[\\X]/', '/[\\Y]/', '/[\\Z]/'], $ERROR, PARSE_MODE_REGEX, 'only escaping a single uc letter'],
  [['/[abc\\a]/', '/[abc\\e]/', '/[abc\\g]/', '/[abc\\h]/', '/[abc\\i]/', '/[abc\\j]/', '/[abc\\k]/', '/[abc\\l]/', '/[abc\\m]/', '/[abc\\o]/', '/[abc\\p]/', '/[abc\\q]/', '/[abc\\u]/', '/[abc\\x]/', '/[abc\\y]/', '/[abc\\z]/'], $ERROR, PARSE_MODE_REGEX, 'escaping a prefixed single lc letter'],
  [['/[abc\\A]/', '/[abc\\E]/', '/[abc\\F]/', '/[abc\\G]/', '/[abc\\H]/', '/[abc\\I]/', '/[abc\\J]/', '/[abc\\K]/', '/[abc\\L]/', '/[abc\\M]/', '/[abc\\N]/', '/[abc\\O]/', '/[abc\\P]/', '/[abc\\Q]/', '/[abc\\R]/', '/[abc\\T]/', '/[abc\\U]/', '/[abc\\V]/', '/[abc\\X]/', '/[abc\\Y]/', '/[abc\\Z]/'], $ERROR, PARSE_MODE_REGEX, 'escaping a prefixed single uc letter'],
  [['/[\\aabcd]/', '/[\\eabcd]/', '/[\\gabcd]/', '/[\\habcd]/', '/[\\iabcd]/', '/[\\jabcd]/', '/[\\kabcd]/', '/[\\labcd]/', '/[\\mabcd]/', '/[\\oabcd]/', '/[\\pabcd]/', '/[\\qabcd]/', '/[\\yabcd]/', '/[\\zabcd]/'], $ERROR, PARSE_MODE_REGEX, 'escaping a suffixed single lc letter'],
  [['/[\\Aabcd]/', '/[\\Cabcd]/', '/[\\Eabcd]/', '/[\\Fabcd]/', '/[\\Gabcd]/', '/[\\Habcd]/', '/[\\Iabcd]/', '/[\\Jabcd]/', '/[\\Kabcd]/', '/[\\Labcd]/', '/[\\Mabcd]/', '/[\\Nabcd]/', '/[\\Oabcd]/', '/[\\Pabcd]/', '/[\\Qabcd]/', '/[\\Rabcd]/', '/[\\Tabcd]/', '/[\\Uabcd]/', '/[\\Vabcd]/', '/[\\Xabcd]/', '/[\\Yabcd]/', '/[\\Zabcd]/'], $ERROR, PARSE_MODE_REGEX, 'escaping a suffixed single uc letter'],
  [['/[abc\\adeff]/', '/[abc\\gdeff]/', '/[abc\\hdeff]/', '/[abc\\ideff]/', '/[abc\\jdeff]/', '/[abc\\kdeff]/', '/[abc\\ldeff]/', '/[abc\\mdeff]/', '/[abc\\odeff]/', '/[abc\\pdeff]/', '/[abc\\qdeff]/', '/[abc\\ydeff]/', '/[abc\\zdeff]/'], $ERROR, PARSE_MODE_REGEX, 'escaping a single lc letter in the middle'],
  [['/[abc\\Adeff]/', '/[abc\\Cdeff]/', '/[abc\\Edeff]/', '/[abc\\Fdeff]/', '/[abc\\Gdeff]/', '/[abc\\Hdeff]/', '/[abc\\Ideff]/', '/[abc\\Jdeff]/', '/[abc\\Kdeff]/', '/[abc\\Ldeff]/', '/[abc\\Mdeff]/', '/[abc\\Ndeff]/', '/[abc\\Odeff]/', '/[abc\\Pdeff]/', '/[abc\\Qdeff]/', '/[abc\\Rdeff]/', '/[abc\\Tdeff]/', '/[abc\\Udeff]/', '/[abc\\Vdeff]/', '/[abc\\Xdeff]/', '/[abc\\Ydeff]/', '/[abc\\Zdeff]/'], $ERROR, PARSE_MODE_REGEX, 'escaping a single uc letter in the middle'],
  [['/[\\_]/', '/[abc\\_]/', '/[\\_abcd]/', '/[abc\\_abcd]/'], $ERROR, PARSE_MODE_REGEX, '_ is not an escapable char'],
  [['/[\\$]/', '/[abc\\$]/', '/[\\$abcd]/', '/[abc\\$abcd]/'], $REGEX, PARSE_MODE_REGEX, '$ is a syntax char we can escape'],
  [[`/[\\^]/`, `/[\\$]/`, `/[\\\\]/`, `/[\\.]/`, `/[\\*]/`, `/[\\+]/`, `/[\\?]/`, `/[\\(]/`, `/[\\)]/`, `/[\\[]/`, `/[\\]]/`, `/[\\{]/`, `/[\\}]/`, `/[\\|]/`], $REGEX, PARSE_MODE_REGEX, 'syntax char escapes'],
  [[`/[abc\\^]/`, `/[abc\\$]/`, `/[abc\\\\]/`, `/[abc\\.]/`, `/[abc\\*]/`, `/[abc\\+]/`, `/[abc\\?]/`, `/[abc\\(]/`, `/[abc\\)]/`, `/[abc\\[]/`, `/[abc\\]]/`, `/[abc\\{]/`, `/[abc\\}]/`, `/[abc\\|]/`], $REGEX, PARSE_MODE_REGEX, 'syntax char escapes with prefix'],
  [[`/[\\^def]/`, `/[\\$def]/`, `/[\\\\def]/`, `/[\\.def]/`, `/[\\*def]/`, `/[\\+def]/`, `/[\\?def]/`, `/[\\(def]/`, `/[\\)def]/`, `/[\\[def]/`, `/[\\]def]/`, `/[\\{def]/`, `/[\\}def]/`, `/[\\|def]/`], $REGEX, PARSE_MODE_REGEX, 'syntax char escapes with suffix'],
  [[`/[\\^`, `/[\\$`, `/[\\\\`, `/[\\.`, `/[\\*`, `/[\\+`, `/[\\?`, `/[\\(`, `/[\\)`, `/[\\]`, `/[\\]`, `/[\\{`, `/[\\}`, `/[\\|`], $ERROR, PARSE_MODE_REGEX, 'syntax char escapes with early eol/eof', 'suffixsp'],
  [[`/[\\']/`, `/[\\"]/`, `/[\\\`]/`], $ERROR, PARSE_MODE_REGEX, 'typical string escapes dont work in regexes'],
  [['/[\\ca]/', '/[\\cb]/', '/[\\cd]/', '/[\\ce]/', '/[\\cf]/', '/[\\cg]/', '/[\\ch]/', '/[\\ci]/', '/[\\cj]/', '/[\\ck]/', '/[\\cl]/', '/[\\cm]/', '/[\\cn]/', '/[\\co]/', '/[\\cp]/', '/[\\cq]/', '/[\\cr]/', '/[\\cs]/', '/[\\ct]/', '/[\\cu]/', '/[\\cv]/', '/[\\cw]/', '/[\\cx]/', '/[\\cy]/', '/[\\cz]/'], $REGEX, PARSE_MODE_REGEX, 'control character lc'],
  [['/[\\cA]/', '/[\\cB]/', '/[\\cD]/', '/[\\cE]/', '/[\\cF]/', '/[\\cG]/', '/[\\cH]/', '/[\\cI]/', '/[\\cJ]/', '/[\\cK]/', '/[\\cL]/', '/[\\cM]/', '/[\\cN]/', '/[\\cO]/', '/[\\cP]/', '/[\\cQ]/', '/[\\cR]/', '/[\\cS]/', '/[\\cT]/', '/[\\cU]/', '/[\\cV]/', '/[\\cW]/', '/[\\cX]/', '/[\\cY]/', '/[\\cZ]/'], $REGEX, PARSE_MODE_REGEX, 'control character uc'],
  [['/[\\ca', '/[\\cb', '/[\\cc', '/[\\cd', '/[\\ce', '/[\\cf', '/[\\cg', '/[\\ch', '/[\\ci', '/[\\cj', '/[\\ck', '/[\\cl', '/[\\cm', '/[\\cn', '/[\\co', '/[\\cp', '/[\\cq', '/[\\cr', '/[\\cs', '/[\\ct', '/[\\cu', '/[\\cv', '/[\\cw', '/[\\cx', '/[\\cy', '/[\\cz'], $ERROR, PARSE_MODE_REGEX, 'control character lc eol/eof', 'suffixsp'],
  [['/[\\cA', '/[\\cB', '/[\\cC', '/[\\cD', '/[\\cE', '/[\\cF', '/[\\cG', '/[\\cH', '/[\\cI', '/[\\cJ', '/[\\cK', '/[\\cL', '/[\\cM', '/[\\cN', '/[\\cO', '/[\\cP', '/[\\cQ', '/[\\cR', '/[\\cS', '/[\\cT', '/[\\cU', '/[\\cV', '/[\\cW', '/[\\cX', '/[\\cY', '/[\\cZ'], $ERROR, PARSE_MODE_REGEX, 'control character uc eol/eof', 'suffixsp'],
  [['/[\\a', '/[\\b', '/[\\d', '/[\\e', '/[\\f', '/[\\g', '/[\\h', '/[\\i', '/[\\j', '/[\\k', '/[\\l', '/[\\m', '/[\\n', '/[\\o', '/[\\p', '/[\\q', '/[\\r', '/[\\s', '/[\\t', '/[\\u', '/[\\v', '/[\\w', '/[\\x', '/[\\y', '/[\\z'], $ERROR, PARSE_MODE_REGEX, 'only escaping a single lc letter', 'suffixsp'],
  [['/[\\A', '/[\\B', '/[\\D', '/[\\E', '/[\\F', '/[\\G', '/[\\H', '/[\\I', '/[\\J', '/[\\K', '/[\\L', '/[\\M', '/[\\N', '/[\\O', '/[\\P', '/[\\Q', '/[\\R', '/[\\S', '/[\\T', '/[\\U', '/[\\V', '/[\\W', '/[\\X', '/[\\Y', '/[\\Z'], $ERROR, PARSE_MODE_REGEX, 'only escaping a single uc letter', 'suffixsp'],
  [['/[abc\\a', '/[abc\\b', '/[abc\\d', '/[abc\\e', '/[abc\\f', '/[abc\\g', '/[abc\\h', '/[abc\\i', '/[abc\\j', '/[abc\\k', '/[abc\\l', '/[abc\\m', '/[abc\\n', '/[abc\\o', '/[abc\\p', '/[abc\\q', '/[abc\\r', '/[abc\\s', '/[abc\\t', '/[abc\\u', '/[abc\\v', '/[abc\\w', '/[abc\\x', '/[abc\\y', '/[abc\\z'], $ERROR, PARSE_MODE_REGEX, 'escaping a prefixed single lc letter', 'suffixsp'],
  [['/[abc\\A', '/[abc\\B', '/[abc\\D', '/[abc\\E', '/[abc\\F', '/[abc\\G', '/[abc\\H', '/[abc\\I', '/[abc\\J', '/[abc\\K', '/[abc\\L', '/[abc\\M', '/[abc\\N', '/[abc\\O', '/[abc\\P', '/[abc\\Q', '/[abc\\R', '/[abc\\S', '/[abc\\T', '/[abc\\U', '/[abc\\V', '/[abc\\W', '/[abc\\X', '/[abc\\Y', '/[abc\\Z'], $ERROR, PARSE_MODE_REGEX, 'escaping a prefixed single uc letter', 'suffixsp'],
  [['/[\\aabcd', '/[\\babcd', '/[\\cabcd', '/[\\dabcd', '/[\\eabcd', '/[\\fabcd', '/[\\gabcd', '/[\\habcd', '/[\\iabcd', '/[\\jabcd', '/[\\kabcd', '/[\\labcd', '/[\\mabcd', '/[\\nabcd', '/[\\oabcd', '/[\\pabcd', '/[\\qabcd', '/[\\rabcd', '/[\\sabcd', '/[\\tabcd', '/[\\uabcd', '/[\\vabcd', '/[\\wabcd', '/[\\xabcd', '/[\\yabcd', '/[\\zabcd'], $ERROR, PARSE_MODE_REGEX, 'escaping a suffixed single lc letter', 'suffixsp'],
  [['/[\\Aabcd', '/[\\Babcd', '/[\\Cabcd', '/[\\Dabcd', '/[\\Eabcd', '/[\\Fabcd', '/[\\Gabcd', '/[\\Habcd', '/[\\Iabcd', '/[\\Jabcd', '/[\\Kabcd', '/[\\Labcd', '/[\\Mabcd', '/[\\Nabcd', '/[\\Oabcd', '/[\\Pabcd', '/[\\Qabcd', '/[\\Rabcd', '/[\\Sabcd', '/[\\Tabcd', '/[\\Uabcd', '/[\\Vabcd', '/[\\Wabcd', '/[\\Xabcd', '/[\\Yabcd', '/[\\Zabcd'], $ERROR, PARSE_MODE_REGEX, 'escaping a suffixed single uc letter', 'suffixsp'],
  [['/[abc\\adeff', '/[abc\\bdeff', '/[abc\\cdeff', '/[abc\\ddeff', '/[abc\\edeff', '/[abc\\fdeff', '/[abc\\gdeff', '/[abc\\hdeff', '/[abc\\ideff', '/[abc\\jdeff', '/[abc\\kdeff', '/[abc\\ldeff', '/[abc\\mdeff', '/[abc\\ndeff', '/[abc\\odeff', '/[abc\\pdeff', '/[abc\\qdeff', '/[abc\\rdeff', '/[abc\\sdeff', '/[abc\\tdeff', '/[abc\\udeff', '/[abc\\vdeff', '/[abc\\wdeff', '/[abc\\xdeff', '/[abc\\ydeff', '/[abc\\zdeff'], $ERROR, PARSE_MODE_REGEX, 'escaping a single lc letter in the middle', 'suffixsp'],
  [['/[abc\\Adeff', '/[abc\\Bdeff', '/[abc\\Cdeff', '/[abc\\Ddeff', '/[abc\\Edeff', '/[abc\\Fdeff', '/[abc\\Gdeff', '/[abc\\Hdeff', '/[abc\\Ideff', '/[abc\\Jdeff', '/[abc\\Kdeff', '/[abc\\Ldeff', '/[abc\\Mdeff', '/[abc\\Ndeff', '/[abc\\Odeff', '/[abc\\Pdeff', '/[abc\\Qdeff', '/[abc\\Rdeff', '/[abc\\Sdeff', '/[abc\\Tdeff', '/[abc\\Udeff', '/[abc\\Vdeff', '/[abc\\Wdeff', '/[abc\\Xdeff', '/[abc\\Ydeff', '/[abc\\Zdeff'], $ERROR, PARSE_MODE_REGEX, 'escaping a single uc letter in the middle', 'suffixsp'],
  [['/[\\$', '/[abc\\$', '/[\\$abcd', '/[abc\\$abcd', '/[\\_', '/[abc\\_', '/[\\_abcd', '/[abc\\_abcd'], $ERROR, PARSE_MODE_REGEX, '$ and _', 'suffixsp'],
  [['/[\\x01]/', '/[\\xf2]/', '/[\\x23]/', '/[\\xb4]/', '/[\\x45]/', '/[\\x5c]/', '/[\\x67]/', '/[\\x7d]/', '/[\\x89]/', '/[\\x90]/'], $REGEX, PARSE_MODE_REGEX, 'valid hex escapes'],
  [['/[\\x]/', '/[\\x0]/', '/[\\x1]/', '/[\\x2]/', '/[\\x3]/', '/[\\x4]/', '/[\\x5]/', '/[\\x6]/', '/[\\x7]/', '/[\\x8]/', '/[\\x9]/'], $ERROR, PARSE_MODE_REGEX, 'invalid hex escape with one char'],
  [['/[\\x', '/[\\x0', '/[\\x1', '/[\\x2', '/[\\x3', '/[\\x4', '/[\\x5', '/[\\x6', '/[\\x7', '/[\\x8', '/[\\x9'], $ERROR, PARSE_MODE_REGEX, 'invalid hex escape with one charat eol/eof', 'suffixsp'],
  [['/[\\x01', '/[\\x12', '/[\\x23', '/[\\x34', '/[\\x45', '/[\\x56', '/[\\x67', '/[\\x78', '/[\\x89', '/[\\x90'], $ERROR, PARSE_MODE_REGEX, 'hex escape at eof/eol', 'suffixsp'],
  [['/[\\u1234]/', '/[x\\u0567]/', '/[\\uf89ay]/', '/[x\\ubcdey]/'], $REGEX, PARSE_MODE_REGEX, 'non surrogate'],
  [['/[\\u', '/[\\u0', '/[\\uf8', '/[\\ubcd', '/[\\ubcde'], $ERROR, PARSE_MODE_REGEX, 'incomplete unicode quad escape eol/eof', 'suffixsp'],
  [['/[x\\u', '/[x\\u0', '/[x\\uf8', '/[x\\ubcd', '/[x\\ubcde'], $ERROR, PARSE_MODE_REGEX, 'incomplete unicode quad escape eol/eof', 'suffixsp'],
  [['/[\\ud800]/', '/[x\\ud810]/', '/[\\ud900y]/', '/[x\\udabcy]/', '/[x\\udabcy]/g', '/[x\\udabcy]/m', '/[x\\udabcy]/iy'], $REGEX, PARSE_MODE_REGEX, 'lead surrogate'],
  [['/[\\ud800\\ud800]/', '/[x\\ud810\\ud810]/', '/[\\ud900\\ud900y]/', '/[x\\udabc\\udabcy]/'], $REGEX, PARSE_MODE_REGEX, 'lead + lead surrogate'],
  [['/[\\udc00]/', '/[x\\udc10]/', '/[\\udd00y]/', '/[x\\udebcy]/', '/[x\\udebcy]/g', '/[x\\udebcy]/im', '/[x\\udebcy]/y'], $REGEX, PARSE_MODE_REGEX, 'trail surrogate'],
  [['/[\\udc00\\udc00]/', '/[x\\udc10\\udc10]/', '/[\\udd00\\udd00y]/', '/[x\\udebc\\udebcy]/', '/[x\\udebc\\udebcy]/i'], $REGEX, PARSE_MODE_REGEX, 'trail + trail surrogate'],
  [['/[\\ud800\\udc00]/', '/[x\\ud810\\udc10]/', '/[\\ud900\\udd00y]/', '/[x\\udabc\\udebcy]/', '/[x\\udabc\\udebcy]/g'], $REGEX, PARSE_MODE_REGEX, 'lead + trail surrogate'],
  [['/[\\u1234\\ud800]/', '/[x\\u0567\\ud810]/', '/[\\uf89a\\ud900y]/', '/[x\\ubcde\\udabcy]/', '/[x\\ubcde\\udabcy]/m'], $REGEX, PARSE_MODE_REGEX, 'non + lead surrogate'],
  [['/[\\u1234\\udc00]/', '/[x\\u0567\\udc10]/', '/[\\uf89a\\udd00y]/', '/[x\\ubcde\\udebcy]/', '/[x\\ubcde\\udebcy]/y'], $REGEX, PARSE_MODE_REGEX, 'non + trail pair'],
  [['/[\\u1234\\u1234\\udc00]/', '/[x\\u0567\\u0567\\udc10]/', '/[\\uf89a\\uf89a\\udd00y]/', '/[x\\ubcde\\ubcde\\udebcy]/'], $REGEX, PARSE_MODE_REGEX, 'non + non + trail pair'],
  [['/[\\u1234\\udc00\\udc00]/', '/[x\\u0567\\udc10\\udc10]/', '/[\\uf89a\\udd00\\udd00y]/', '/[x\\ubcde\\udebc\\udebcy]/'], $REGEX, PARSE_MODE_REGEX, 'non + trail + trail pair'],
  [['/[\\ud800\\ud800\\udc00]/', '/[x\\ud810\\ud810\\udc10]/', '/[\\ud900\\ud900\\udd00y]/', '/[x\\udabc\\udabc\\udebcy]/'], $REGEX, PARSE_MODE_REGEX, 'lead + lead + trail surrogate'],
  [['/[\\ud800\\udc00\\udc00]/', '/[x\\ud810\\udc10\\udc10]/', '/[\\ud900\\udd00\\udd00y]/', '/[x\\udabc\\udebc\\udebcy]/'], $REGEX, PARSE_MODE_REGEX, 'lead + trail + trail surrogate'],
  [['/[\\ud800\\udc00\\ud800]/', '/[x\\ud810\\udc10\\ud810]/', '/[\\ud900\\udd00\\ud900y]/', '/[x\\udabc\\udebc\\udabcy]/'], $REGEX, PARSE_MODE_REGEX, 'lead + trail + lead surrogate'],
  [[`/[\\u{0123}]/`, `/[\\u{4567}]/`, `/[\\u{89abc}]/`, `/[\\u{defAB}]/`, `/[\\u{CDEF}]/`], $ERROR, PARSE_MODE_REGEX],
  [`/[prefix \\u{012345}]/`, $ERROR, PARSE_MODE_REGEX],
  [`/[\\u{012345} postfix]/`, $ERROR, PARSE_MODE_REGEX],
  [`/[\\u{012345}\\u{6789a}]/`, $ERROR, PARSE_MODE_REGEX],
  [[`/[\\u{}]/`, `/[\\u{fail}]/`, `/[\\u{afail}]/`, `/[\\u{0fail}]/`, `/[\\u{xxxx}]/`], $ERROR, PARSE_MODE_REGEX, 'long unicode escape bad contents'],
  [[`/[\\u{]/`, `/[\\u{a]/`, `/[\\u{af]/`, `/[\\u{012]/`, `/[\\u{01234]/`, `/[\\u{012345]/`], $ERROR, PARSE_MODE_REGEX, 'unclosed long unicode escapes'],
  [[`/[\\u{1}]/`, `/[\\u{12}]/`, `/[\\u{123}]/`, `/[\\u{1234}]/`, `/[\\u{12345}]/`, `/[\\u{103456}]/`], $ERROR, PARSE_MODE_REGEX, 'incomplete long unicode escapes'],
  [[`/[\\u{`, `/[\\u{a`, `/[\\u{af`, `/[\\u{123`, `/[\\u{1234`, `/[\\u{12345`, `/[\\u{103456`], $ERROR, PARSE_MODE_REGEX, 'incomplete long unicode escapes in unclosed string', 'suffixsp'],
  [`/[\\u{10ffff}]/`, $ERROR, PARSE_MODE_REGEX, 'It is a Syntax Error if the MV of HexDigits > 1114111.'],
  [[`/[\\u{110000}]/`, `/[\\u{120000}]/`, `/[\\u{900000}]/`, `/[\\u{123456789}]/`, `/[\\u{ffffffffffffffff}]/`], $ERROR, PARSE_MODE_REGEX, 'It is a Syntax Error if the MV of HexDigits > 1114111.'],
  [`/[\\u{10000000000000000}]/`, $ERROR, PARSE_MODE_REGEX, 'regex value that would exceed 32bits'],
  [`/[\\u{fffffffffffffffffffff}]/`, $ERROR, PARSE_MODE_REGEX, 'regex value that would exceed 32bits'],
  [`/[\\u{0000000000000000000010ffff}]/`, $ERROR, PARSE_MODE_REGEX, 'must take care that the hex may still have any number of leading zeroes'],
  [[`/[\\u{00000000000000000000110000}]/`, `/[\\u{00000000000000000000120000}]/`, `/[\\u{0000000000123456789}]/`, `/[\\u{000000ffffffffffffffff}]/`], $ERROR, PARSE_MODE_REGEX, 'must take care that the hex may still have any number of leading zeroes'],
  [['/[\\da-z]/', '/[\\DA-Z]/', '/[\\sa-z]/', '/[\\SA-S]/', '/[\\wa-z]/', '/[\\WA-Z]/'], $REGEX, PARSE_MODE_REGEX, 'class escapes are also valid in char classes that contain ranges'],
  [['/[\\d-z]/', '/[\\D-Z]/', '/[\\s-z]/', '/[\\S-S]/', '/[\\w-z]/', '/[\\W-Z]/'], $ERROR, PARSE_MODE_REGEX, 'class escapes are never valid when part of a range'],
  [['/[x\\da-z]/', '/[x\\DA-Z]/', '/[x\\sa-z]/', '/[x\\SA-S]/', '/[x\\wa-z]/', '/[x\\WA-Z]/'], $REGEX, PARSE_MODE_REGEX, 'with prefix class escapes are also valid in char classes that contain ranges'],
  [['/[x\\d-z]/', '/[x\\D-Z]/', '/[x\\s-z]/', '/[x\\S-S]/', '/[x\\w-z]/', '/[x\\W-Z]/'], $ERROR, PARSE_MODE_REGEX, 'with prefix class escapes are never valid when part of a range'],
  [['/[a-z\\d]/', '/[A-Z\\D]/', '/[a-z\\s]/', '/[A-S\\S]/', '/[a-z\\w]/', '/[A-Z\\W]/'], $REGEX, PARSE_MODE_REGEX, 'class escapes are also valid in char classes that contain ranges'],
  [['/[a-\\d]/', '/[A-\\D]/', '/[a-\\s]/', '/[A-\\S]/', '/[a-\\w]/', '/[A-\\W]/'], $ERROR, PARSE_MODE_REGEX, 'class escapes are never valid when part of a range'],
  [['/[a-z\\dx]/', '/[A-Z\\Dx]/', '/[a-z\\sx]/', '/[A-S\\Sx]/', '/[a-z\\wx]/', '/[A-Z\\Wx]/'], $REGEX, PARSE_MODE_REGEX, 'with suffix class escapes are also valid in char classes that contain ranges'],
  [['/[a-\\dx]/', '/[A-\\Dx]/', '/[a-\\sx]/', '/[A-\\Sx]/', '/[a-\\wx]/', '/[A-\\Wx]/'], $ERROR, PARSE_MODE_REGEX, 'with suffix class escapes are never valid when part of a range'],
  ['/\\2(x)/', $ERROR, PARSE_MODE_REGEX, 'it is an error if a digital non-zero escape evaluates to a number bigger than the number of groups'],
  // surrogate pairs revisited
  ['/[1-9]/', $REGEX, PARSE_MODE_REGEX, 'char class ranges should be lo-hi'],
  ['/[9-1]/', $ERROR, PARSE_MODE_REGEX, 'char class ranges should be lo-hi and it is a syntax error otherwise'],
  ['/[\\u5000-\\u6000]/', $REGEX, PARSE_MODE_REGEX, 'escapes are no problem for ranges'],
  ['/[\\u6000-\\u5000]/', $ERROR, PARSE_MODE_REGEX, 'escapes are also bound by the lo-hi rule'],
  ['/[\\uD83D\\uDCA9]/', $REGEX, PARSE_MODE_REGEX, 'Unicode Character PILE OF POO (U+1F4A9) surrogate pair base test case. sans u-flag this matches two individual chars'],
  ['/[\\uD83D\\uDCAB]/', $REGEX, PARSE_MODE_REGEX, 'Unicode Character DIZZY SYMBOL (U+1F4AB) surrogate pair base test case. sans u-flag this matches two individual chars'],
  [['/[\\uD83D\\uDCA9-\\uD83D\\uDCAB]/', '/[\uD83D\\uDCA9-\\uD83D\\uDCAB]/', '/[\\uD83D\uDCA9-\\uD83D\\uDCAB]/', '/[\\uD83D\\uDCA9-\uD83D\\uDCAB]/', '/[\\uD83D\\uDCA9-\\uD83D\uDCAB]/', '/[\uD83D\uDCA9-\\uD83D\\uDCAB]/', '/[\uD83D\\uDCA9-\uD83D\\uDCAB]/', '/[\uD83D\\uDCA9-\\uD83D\uDCAB]/', '/[\\uD83D\uDCA9-\uD83D\\uDCAB]/', '/[\\uD83D\uDCA9-\\uD83D\uDCAB]/', '/[\\uD83D\\uDCA9-\uD83D\uDCAB]/', '/[\uD83D\uDCA9-\uD83D\\uDCAB]/', '/[\uD83D\uDCA9-\\uD83D\uDCAB]/', '/[\\uD83D\uDCA9-\uD83D\uDCAB]/', '/[\uD83D\uDCA9-\uD83D\uDCAB]/'], $ERROR, PARSE_MODE_REGEX, 'range poo to dizzy some are escapes and some are literal but surrogates should still work (and error without u flag)'],
  [['/[\\x01-\\x17]/', '/[\\u0001-\\x17]/', '/[\\x01-\\u0007]/', '/[\\x01-\\x17]/', '/[A-\\cH]/', '/[\\cH-Z]/'], $REGEX, PARSE_MODE_REGEX, 'ranges using various escapes'],
  [['/[\\u{5}-1]/', '/[\\x01-\\u{347}]/'], $ERROR, PARSE_MODE_REGEX, 'ranges using various escapes and long unicode escapes'],
  [['/[1-\\u{500}]/', '/\\u{01}-\\x07/'], $ERROR, PARSE_MODE_REGEX, 'various ranges using escapes but using long unicodes'],
  [['/[--0]/', '/[+--]/'], $REGEX, PARSE_MODE_REGEX, 'dash is also a dash at the start or end of a range'],
  [['/[-+]/', '/[+-]/', '/[---+]/', '/[---0]/'], $REGEX, PARSE_MODE_REGEX, 'positive dash edge cases'],
  ['/[-]/', $REGEX, PARSE_MODE_REGEX, 'a dash'],
  ['/[--]/', $REGEX, PARSE_MODE_REGEX, 'no range, just twice the dash'],
  ['/[---]/', $REGEX, PARSE_MODE_REGEX, 'a range that starts and ends with a dash'],
  ['/[----]/', $REGEX, PARSE_MODE_REGEX, 'a range that starts and ends with a dash and then followed by a single character that is also a dash'],
  ['/[-----]/', $REGEX, PARSE_MODE_REGEX, 'a range that starts and ends with a dash and then followed by a single character that is also a dash and ends with a dash because they cant make another range'],
  ['/[------]/', $REGEX, PARSE_MODE_REGEX, 'twice the range that starts and ends with a dash can i stop now?'],
  ['/[-------]/', $REGEX, PARSE_MODE_REGEX, 'certainly we can proof by induction now'],
  ['/[--------]/', $REGEX, PARSE_MODE_REGEX, 'yeah'],
  ['/[---------]/', $REGEX, PARSE_MODE_REGEX, 'this is n+2 so qed'],
  [['/[--+]/', '/[0--]/', '/[x---]/', '/[0---]/'], $ERROR, PARSE_MODE_REGEX, 'negative dash edge cases'],
  ['/[x-\\uD83D\\uDE07--+]/', $ERROR, PARSE_MODE_REGEX, 'range with a surrogate on the right; with u flag causing two valid ranges (x-D83DDE07 and --+), without u flag causing a valid range (x-D83D) and an invalid range (DE07--)'],
  ['/[x-\\uD83D\\uDE07--x-\\uD83D\\uDE07--]/', $ERROR, PARSE_MODE_REGEX, 'more silliness'],
  // capturing group
  [['/(b)/', '/a(b)/', '/(b)c/', '/a(b)c/'], $REGEX, PARSE_MODE_REGEX],
  [['/(b)', '/a(b)', '/(b)c', '/a(b)c'], $ERROR, PARSE_MODE_REGEX, 'unclosed regex', 'suffixsp'],
  ['/(', $ERROR, PARSE_MODE_REGEX, 'eol/eof in a group', 'suffixsp'],
  ['/)/', $ERROR, PARSE_MODE_REGEX, 'closing paren without opener must be escaped'],
  ['/)', $ERROR, PARSE_MODE_REGEX, 'closing paren without opener must be escaped at eol/eof', 'suffixsp'],
  [['/((b))/', '/(a(b))/', '/a(a(b))/', '/(a(b))c/', '/a(a(b))c/', '/((b)c)/', '/a((b)c)/', '/((b)c)c/', '/a((b)c)c/', '/(a(b)c)/', '/a(a(b)c)/', '/(a(b)c)c/', '/a(a(b)c)c/'], $REGEX, PARSE_MODE_REGEX],
  [['/((b', '/((b)', '/((b))', '/(a(b', '/(a(b)', '/(a(b))', '/a(a(b', '/a(a(b)', '/a(a(b))'], $ERROR, PARSE_MODE_REGEX, 'unclosed regex', 'suffixsp'],
  ['/(?x)/', $ERROR, PARSE_MODE_REGEX, 'qmark is invalid without proper next char'],
  ['/(?', $ERROR, PARSE_MODE_REGEX, 'qmark is invalid without proper next char at eol/eof', 'suffixsp'],
  ['/()/', $REGEX, PARSE_MODE_REGEX, 'capturing group can be empty'],
  // non-capturing group
  [['/(?:b)/', '/a(?:b)/', '/(?:b)c/', '/a(?:b)c/'], $REGEX, PARSE_MODE_REGEX],
  [['/(?:b)', '/a(?:b)', '/(?:b)c', '/a(?:b)c'], $ERROR, PARSE_MODE_REGEX, 'unclosed regex', 'suffixsp'],
  [['/(?:(?:b))/', '/(?:a(?:b))/', '/a(?:a(?:b))/', '/(?:a(?:b))c/', '/a(?:a(?:b))c/', '/(?:(?:b)c)/', '/a(?:(?:b)c)/', '/(?:(?:b)c)c/', '/a(?:(?:b)c)c/', '/(?:a(?:b)c)/', '/a(?:a(?:b)c)/', '/(?:a(?:b)c)c/', '/a(?:a(?:b)c)c/'], $REGEX, PARSE_MODE_REGEX],
  [['/(?:(?:b', '/(?:(?:b)', '/(?:(?:b))', '/(?:a(?:b', '/(?:a(?:b)', '/(?:a(?:b))', '/a(?:a(?:b', '/a(?:a(?:b)', '/a(?:a(?:b))'], $ERROR, PARSE_MODE_REGEX, 'unclosed regex', 'suffixsp'],
  ['/(?:)/', $REGEX, PARSE_MODE_REGEX, 'non capturing group can be empty'],
  // lookahead
  [['/(?=b)/', '/a(?=b)/', '/(?=b)c/', '/a(?=b)c/'], $REGEX, PARSE_MODE_REGEX],
  [['/(?=b)', '/a(?=b)', '/(?=b)c', '/a(?=b)c'], $ERROR, PARSE_MODE_REGEX, 'unclosed regex', 'suffixsp'],
  [['/(?=(?=b))/', '/(?=a(?=b))/', '/a(?=a(?=b))/', '/(?=a(?=b))c/', '/a(?=a(?=b))c/', '/(?=(?=b)c)/', '/a(?=(?=b)c)/', '/(?=(?=b)c)c/', '/a(?=(?=b)c)c/', '/(?=a(?=b)c)/', '/a(?=a(?=b)c)/', '/(?=a(?=b)c)c/', '/a(?=a(?=b)c)c/'], $REGEX, PARSE_MODE_REGEX],
  [['/(?=(?=b', '/(?=(?=b)', '/(?=(?=b))', '/(?=a(?=b', '/(?=a(?=b)', '/(?=a(?=b))', '/a(?=a(?=b', '/a(?=a(?=b)', '/a(?=a(?=b))'], $ERROR, PARSE_MODE_REGEX, 'unclosed regex', 'suffixsp'],
  ['/(?=)/', $REGEX, PARSE_MODE_REGEX, 'lookahead can be empty'],
  // negative capturing group
  [['/(?!b)/', '/a(?!b)/', '/(?!b)c/', '/a(?!b)c/'], $REGEX, PARSE_MODE_REGEX],
  [['/(?!b)', '/a(?!b)', '/(?!b)c', '/a(?!b)c'], $ERROR, PARSE_MODE_REGEX, 'unclosed regex', 'suffixsp'],
  [['/(?!(?!b))/', '/(?!a(?!b))/', '/a(?!a(?!b))/', '/(?!a(?!b))c/', '/a(?!a(?!b))c/', '/(?!(?!b)c)/', '/a(?!(?!b)c)/', '/(?!(?!b)c)c/', '/a(?!(?!b)c)c/', '/(?!a(?!b)c)/', '/a(?!a(?!b)c)/', '/(?!a(?!b)c)c/', '/a(?!a(?!b)c)c/'], $REGEX, PARSE_MODE_REGEX],
  [['/(?!(?!b', '/(?!(?!b)', '/(?!(?!b))', '/(?!a(?!b', '/(?!a(?!b)', '/(?!a(?!b))', '/a(?!a(?!b', '/a(?!a(?!b)', '/a(?!a(?!b))'], $ERROR, PARSE_MODE_REGEX, 'unclosed regex', 'suffixsp'],
  ['/(?!)/', $REGEX, PARSE_MODE_REGEX, 'inverted lookahead can be empty'],
  // mixed group types
  [[
    '/a(b(c)d)e/',
    '/a(b(?:c)d)e/',
    '/a(b(?=c)d)e/',
    '/a(b(?!c)d)e/',
    '/a(?:b(c)d)e/',
    '/a(?:b(?:c)d)e/',
    '/a(?:b(?=c)d)e/',
    '/a(?:b(?!c)d)e/',
    '/a(?=b(c)d)e/',
    '/a(?=b(?:c)d)e/',
    '/a(?=b(?=c)d)e/',
    '/a(?=b(?!c)d)e/',
    '/a(?!b(c)d)e/',
    '/a(?!b(?:c)d)e/',
    '/a(?!b(?=c)d)e/',
    '/a(?!b(?!c)d)e/',
  ], $REGEX, PARSE_MODE_REGEX],
  // unclosed groups
  [[
    '/a(bcde/',
    '/a(b(cde/',
    '/a(b(?:cd)e/',
    '/a(b(?:cde/',
    '/a(b(?=cd)e/',
    '/a(b(?=cde/',
    '/a(b(?!cd)e/',
    '/a(b(?!cde/',
    '/a(?:b(cd)e/',
    '/a(?:b(cde/',
    '/a(?:b(?:cd)e/',
    '/a(?:b(?:cde/',
    '/a(?:b(?=cd)e/',
    '/a(?:b(?=cde/',
    '/a(?:b(?!cd)e/',
    '/a(?:b(?!cde/',
    '/a(?=b(cd)e/',
    '/a(?=b(cde/',
    '/a(?=b(?:cd)e/',
    '/a(?=b(?:cde/',
    '/a(?=b(?=cd)e/',
    '/a(?=b(?=cde/',
    '/a(?=b(?!cd)e/',
    '/a(?=b(?!cde/',
    '/a(?!b(c)de/',
    '/a(?!b(cde/',
    '/a(?!b(?:cd)e/',
    '/a(?!b(?:cde/',
    '/a(?!b(?=cd)e/',
    '/a(?!b(?=cde/',
    '/a(?!b(?!cd)e/',
    '/a(?!b(?!cde/',
  ], $ERROR, PARSE_MODE_REGEX],

  // test262
  [[
    '/0{2,1}/',
    '/^[z-a]$/',
    '/abc/a',
    '/a**/', '/a***/', '/a++/', '/a+++/', '/a???/', '/a????/',
    '/x{1}{1,}/', '/x{1,2}{1}/', '/x{1,}{1}/', '/x{0,1}{1,}/',
    //'/*a/', '/**a/',  // these are multi line comments
    '/+a/', '/++a/', '/?a/', '/??a/',
    '/[b-ac-e]/', '/[a-dc-b]/', '/[\\db-G]/', '/[\\Db-G]/', '/[\\sb-G]/', '/[\\Sb-G]/', '/[\\wb-G]/', '/[\\Wb-G]/', '/[\\0b-G]/', '/[\\10b-G]/', '/[\\bd-G]/', '/[\\Bd-G]/', '/[\\td-G]/',
    '/[\\nd-G]/', '/[\\vd-G]/', '/[\\fd-G]/', '/[\\rd-G]/', '/[\\c0001d-G]/', '/[\\x0061d-G]/', '/[\\u0061d-G]/', '/[\\ad-G]/', '/[c-eb-a]/', '/[b-G\\d]/', '/[b-G\\D]/', '/[b-G\\s]/',
    '/[b-G\\S]/', '/[b-G\\w]/', '/[b-G\\W]/', '/[b-G\\0]/', '/[b-G\\10]/', '/[d-G\\b]/', '/[d-G\\B]/', '/[d-G\\t]/', '/[d-G\\n]/', '/[d-G\\v]/', '/[d-G\\f]/', '/[d-G\\r]/', '/[d-G\\c0001]/',
    '/[d-G\\x0061]/', '/[d-G\\u0061]/', '/[d-G\\a]/',
    '/\\\rn/',
  ], $ERROR, PARSE_MODE_REGEX, 'leading quantifier'],
  [[
    '/(?=.)*/', '/(?=.)+/', '/(?=.)?/', '/(?=.){1}/',
    '/(?!.)*/', '/(?!.)+/', '/(?!.)?/', '/(?!.){1}/',
  ], $REGEX, PARSE_MODE_REGEX, 'leading quantifier'],
  [[
    '/\\b*/u', '/\\b+/u', '/\\b?/u', '/\\b{1}/u', '/\\b**/u', '/\\b++/u', '/\\b?+/u', '/\\b{1}+/u', '/(?=.)**/', '/(?=.)++/', '/(?=.)?+/', '/(?=.){1}+/',
    '/\\B*/u', '/\\B+/u', '/\\B?/u', '/\\B{1}/u', '/\\B**/u', '/\\B++/u', '/\\B?+/u', '/\\B{1}+/u', '/(?!.)**/', '/(?!.)++/', '/(?!.)?+/', '/(?!.){1}+/',
  ], $ERROR, PARSE_MODE_REGEX, 'leading quantifier'],

  ['/./\\u0067', $ERROR, PARSE_MODE_REGEX, 'It is a Syntax Error if IdentifierPart contains a Unicode escape sequence (11.8.5.1).'],

  [['/abc/gim', '/a|ab/', '/((a)|(ab))((c)|(bc))/', '/\\d{3}|[a-z]{4}/', '/\\d{3}|[a-z]{4}/', '/ab|cd|ef/i', '/ab|cd|ef/', '/(?:ab|cd)+|ef/i', '/(?:ab|cd)+|ef/i',
    '/11111|111/', '/xyz|.../', '/(.)..|abc/', '/.+: gr(a|e)y/', '/(Rob)|(Bob)|(Robert)|(Bobby)/', '/()|/', '/|()/', '/a[a-z]{2,4}/', '/a[a-z]{2,4}?/',
    '/(aa|aabaac|ba|b|c)*/', '/(z)((a+)?(b+)?(c))*/', '/(a*)b\\1+/', '/s$/', '/e$/', '/s$/m', '/[^e]$/mg', '/es$/mg', '/^m/', '/^m/m', '/^p[a-z]/', '/^p[b-z]/m', '/^[^p]/m', '/^ab/', '/^..^e/', '/^xxx/',
    '/^\\^+/', '/^\\d+/m', '/\\bp/', '/ot\\b/', '/\\bot/', '/\\bso/', '/so\\b/', '/[^o]t\\b/', '/[^o]t\\b/i', '/\\bro/', '/r\\b/', '/\\brobot\\b/', '/\\b\\w{5}\\b/', '/\\bop/', '/op\\b/', '/e\\b/', '/\\be/', '/\\Bevil\\B/', '/[f-z]e\\B/', '/\\Bo\\B/i', '/\\B\\w\\B/', '/\\w\\B/', '/\\B\\w/', '/\\B[^z]{4}\\B/', '/\\B\\w{4}\\B/', '/^^^^^^^robot$$$$/',
    '/\\B\\B\\B\\B\\B\\Bbot\\b\\b\\b\\b\\b\\b\\b/', '/^.*?$/', '/^.*?/', '/^.*?(:|$)/', '/^.*(:|$)/', '/\\d{2,4}/', '/b{2,3}c/', '/b{42,93}c/', '/b{0,93}c/', '/bx{0,93}c/', '/.{0,93}/', '/\\w{3}\\d?/',
    '/\\w{3}\\d?/', '/b{2}c/', '/b{8}/', '/\\s+java\\s+/', '/[a-z]+\\d+/', '/[a-z]+\\d+/', '/[a-z]+(\\d+)/', '/d+/', '/o+/', '/(b+)(b+)(b+)/', '/(b+)(b*)/', '/b*b+/', '/[^"]*/', '/[^"]*/', '/[^"]*/',
    `/["'][^"']*["']/`, '/(x*)(x+)/', '/(\\d*)(\\d+)/', '/(\\d*)\\d(\\d+)/', '/(x+)(x*)/', '/x*y+$/', '/[\\d]*[\\s]*bc./', '/bc..[\\d]*[\\s]*/', '/[xyz]*1/', '/java(script)?/', '/x?y?z?/', '/x?ay?bz?c/',
    '/ab?c?d?x?y?z/', '/\\??\\??\\??\\??\\??/', '/.?.?.?.?.?.?.?/', '/b{2,}c/', '/b{8,}c/', '/\\d{1,}/', '/(123){1,}/', '/(123){1,}x\\1/', '/x{1,2}x{1,}/', '/(?=(a+))/', '/(?=(a+))a*b\\1/',
    '/[Jj]ava([Ss]cript)?(?=\\:)/', '/(.*?)a(?!(a+)b\\2c)\\2(.*)/', '/Java(?!Script)([A-Z]\\w*)/', '/Java(?!Script)([A-Z]\\w*)/', '/(\\.(?!com|org)|\\/)/', '/(?!a|b)|c/',
    '/([Jj]ava([Ss]cript)?)\\sis\\s(fun\\w*)/', '/(.{3})(.{4})/', '/(aa)bcd\\1/', '/(aa).+\\1/', '/(.{2}).+\\1/', '/(\\d{3})(\\d{3})\\1\\2/', '/a(..(..)..)/', '/(a(b(c)))(d(e(f)))/',
    '/(a(b(c)))(d(e(f)))\\2\\5/', '/a(.?)b\\1c\\1d\\1/', '/<body.*>((.*\\n?)*?)<\\/body>/i', '/(\\|)([\\w\\x81-\\xff ]*)(\\|)([\\/a-z][\\w:\\/\\.]*\\.[a-z]{3,4})(\\|)/ig',
    '/([\\S]+([ \\t]+[\\S]+)*)[ \\t]*=[ \\t]*[\\S]+/', '/^(A)?(A.*)$/', '/(a)?a/', '/a|(b)/', '/(a)?(a)/', '/^([a-z]+)*[a-z]$/', '/^(([a-z]+)*[a-z]\\.)+[a-z]{2,}$/',
    '/^(([a-z]+)*([a-z])\\.)+[a-z]{2,}$/', '/.*a.*/', '/.+/', '/[a-z]+/ig', '/[a-z]+/', '/\\b(\\w+) \\1\\b/', '/([xu]\\d{2}([A-H]{2})?)\\1/', '/([xu]\\d{2}([A-H]{2})?)\\1/',
    '/(a*)b\\1+/', '/((((((((((A))))))))))\\1\\2\\3\\4\\5\\6\\7\\8\\9\\10/', '/((((((((((A))))))))))\\10\\9\\8\\7\\6\\5\\4\\3\\2\\1/', '/[]a/', '/q[ax-zb](?=\\s+)/',
    '/ab[ercst]de/', '/[d-h]+/', '/[1234567].{2}/', '/[a-c\\d]+/', '/ab[.]?c/', '/a[b]c/', '/[a-z][^1-9][a-z]/', '/[*&$]{3}/', '/[\\d][\\n][^\\d]/', '/[^]a/m', '/a[^]/',
    '/a[^b-z]\\s+/', '/[^\\b]+/g', '/a[^1-9]c/', '/a[^b]c/', '/[^a-z]{4}/', '/.[\\b]./', '/c[\\b]{3}d/', '/[^\\[\\b\\]]+/', '/\\u0042/i', '/1?1/mig',
  ], $REGEX, PARSE_MODE_REGEX, 'from ecma test suite'],

  [['/\\;/', '/\\ /', '/\\:/'], $REGEX, PARSE_MODE_REGEX, 'escaped non-special is a IdentityEscape without u-flag and an error with u-flag'],

  ['/x{,', $ERROR, PARSE_MODE_REGEX, 'invalid curly quantifier', 'suffixsp'],
  ['/[+9]\\uD83D\\uDE07q\\uD83D(?:q??)\\uDE07\\uDE07\\', $ERROR, PARSE_MODE_REGEX, 'trailing backslash', ['suffixls', 'suffixcr', 'suffcrlf', 'suffixsp']],

];
// exhaustive set of lead/tail/non surrogate combos, with one to three chars on each side of the dash (so (4**4)*(3**2)=2304 tests with a few dupes due to the empty case)
['', 'B', 'L', 'T'].forEach(a => ['', 'B', 'L', 'T'].forEach(b => ['B', 'L', 'T'].forEach(c => ['B', 'L', 'T'].forEach(d => ['', 'B', 'L', 'T'].forEach(e => ['', 'B', 'L', 'T'].forEach(f => {
  regexesn.push([`/[${a}${b}${c}-${d}${e}${f}]/`.replace(/B/g, 'x').replace(/L/g, '\\uD83D').replace(/T/g, '\\uDCA9'), c<=d?$REGEX:$ERROR, PARSE_MODE_REGEX, 'generated case '+ a+b+c+d+e+f]);
}))))));

//export default regexesn;
module.exports = regexesn;
