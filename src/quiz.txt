How do you put two newlines in a raw string with only one line-continuation?
Is `\u{}` valid?
Is there a max to the number of digits of a hex escape? And what about unicode escape?
How do you put two consecutive dots in valid JS without it being three?
What's the longest way to write a number that results in a zero without repeating any characters?
What's the biggest operator? (>>>=, or instanceof)
Can the new `\u{..}` unicode escape cause an error in comments?
How many distinct newline characters does JS acknowledge? (4: \r \n ls ps, or 5 with crlf)
Can comments cause an ASI?
Can you have backslashes in var names? (trick question: no)
Can you use the non breaking space (&nbsp; or 0xA0) as whitespace?
How do you generate an error with just a (single or double quoted) string?
Which of the single digit escapes are allowed in strings in sloppy mode? and in strict mode?
Create the empty regular expression (`//` would lead to a comment)
How do you get `//` in the source code without leading to a comment? And not part of a string/comment.
Are these regexes valid?  /a|/  /|a/  /|/
What's wrong here? `do foo while (bar);`
What punctuators could follow this code such that it could end up valid? `[a, {[b]: c}]` meh
Destructuring puzzles; valid? ({foo=bar})
Can you use `let` as a var name? Can you call a method with property access? `let.foo();` and `let[foo]();`? https://tc39.github.io/ecma262/#prod-ExpressionStatement
The "ambiguity" of the forward slash (`/`) is well-known. Besides the start of a comment, it can either be the start of a regular expression or just the division operator (but never ever both). Can you name the character for which ES6 introduced this problem as well?
To which `if` does the `else` bind? `if (a); if (b); else c;`
Is this multiplication of a generator or x^2? `x**function(){ return 2}()`
parseInt('1e10'), parseFloat('1e10'), Number('1e10'), +1e10
Can you use numbers as method names in object literals or classes or both or neither?
What does `new.target` refer to in
 - a regular function?
 - an arrow function?
 - a nested arrow in a nested function?
 - global scope?
What does this do? `new/foo/g.bar();`
Can you use new.target as function arg defaults?
`let [foo].bar;` is bad. Is `let\n[foo].bar;` allowed because ASI?
Can you have a for-in or for-of loop without a key? `for (let [] in {a:1, b:2, c:3}) console.log('x');`
How can you create multiple variables with the catch clause parameter? (`try {} catch (HERE) {}`)
function f(a,b){ b=5; console.log(arguments[1]); } f(); f(1); f(1,2); f(1, undefined); // implicit arguments bind
Shortest way of creating an array with one hole and no other values (so `[]` with `'0' in arr) === false`)
What's legal and what isn't? `f({a = b});`, `f({a = b} = c)`, `f({...a = b})`, `f({...a = b} = c)`
Which one is legal; `f({a:v=b}=c);`, `({a:v=b}=c);`, `({a:v=b}=c) => x;`
What does a static constructor do? `class X{static constructor {}}`
Is the inner `yield` destructible? `function *f({x: x}) { function f({x: yield}) {} }`

s=new Set(); s.add(NaN); s.add(NaN); log(s.size); // NaN == NaN

will this run, fail at compile time, fail at runtime? x```y```z (in MD style)

https://twitter.com/bmeurer/status/866339039200325632

aborting a custom iterator from for-of when that iterator refuses to abort
